{"score":90.88,"report":[{"format":"typescript","foundDate":1660288307106,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/widget-modal.ts","start":{"line":38,"column":2,"position":297},"end":{"line":46,"column":7,"position":382},"range":[967,1207],"fragment":"= {},\n        } = config;\n        this.align = props.align;\n        this.title = props.title || name;\n        this.onClick = props.onClick;\n        if (props.onInit) {\n            props.onInit.call(this, this);\n        }\n        this._modal"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/widget-panel.ts","start":{"line":38,"column":2,"position":297},"end":{"line":46,"column":7,"position":382},"range":[967,1207],"fragment":"= {},\n        } = config;\n        this.align = props.align;\n        this.title = props.title || name;\n        this.onClick = props.onClick;\n        if (props.onInit) {\n            props.onInit.call(this, this);\n        }\n        this._panel"}},{"format":"less","foundDate":1660288307223,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/workbench.less","start":{"line":131,"column":4,"position":821},"end":{"line":152,"column":2,"position":942},"range":[3704,4361],"fragment":";\n                background-color: #fff;\n                display: flex;\n                align-items: center;\n                &-left {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                &-center {\n                    flex: 1;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                &-right {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n            }\n        }"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/workbench.less","start":{"line":104,"column":5,"position":660},"end":{"line":125,"column":17,"position":781},"range":[2862,3538],"fragment":";\n                background-color: #fff;\n                display: flex;\n                align-items: center;\n                &-left {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                &-center {\n                    flex: 1;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                &-right {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n            }\n            .letgo-main-area"}},{"format":"tsx","foundDate":1660288307243,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/toolbar.tsx","start":{"line":1,"column":1,"position":0},"end":{"line":27,"column":6,"position":229},"range":[0,763],"fragment":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            const"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/top-area.tsx","start":{"line":1,"column":1,"position":0},"end":{"line":27,"column":5,"position":229},"range":[0,762],"fragment":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            area"}},{"format":"tsx","foundDate":1660288307244,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/toolbar.tsx","start":{"line":33,"column":17,"position":268},"end":{"line":52,"column":14,"position":499},"range":[916,1721],"fragment":".slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`toolbar-${item.name}`}>{item.content}</div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-toolbar"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/top-area.tsx","start":{"line":28,"column":17,"position":236},"end":{"line":47,"column":15,"position":467},"range":[791,1598],"fragment":".slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`top-area-${item.name}`}>{item.content}</div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-top-area"}},{"format":"tsx","foundDate":1660288307259,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/left-area.tsx","start":{"line":1,"column":1,"position":0},"end":{"line":22,"column":6,"position":157},"range":[0,583],"fragment":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        const"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/top-area.tsx","start":{"line":1,"column":1,"position":0},"end":{"line":22,"column":7,"position":157},"range":[0,584],"fragment":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return"}},{"format":"tsx","foundDate":1660288307260,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/left-area.tsx","start":{"line":24,"column":7,"position":190},"end":{"line":36,"column":9,"position":363},"range":[655,1147],"fragment":": VNode[] = [];\n        area.items.value\n            .slice()\n            .sort((a, b) => {\n                const index1 = a.config?.index || 0;\n                const index2 = b.config?.index || 0;\n                return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n            })\n            .forEach((item) => {\n                const content = (\n                    <div key={`left-area-${item.name}`}>{item.content}</div>\n                );\n                if (item.align === 'bottom'"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/top-area.tsx","start":{"line":26,"column":6,"position":216},"end":{"line":38,"column":9,"position":389},"range":[730,1269],"fragment":": VNode[] = [];\n            area.items.value\n                .slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`top-area-${item.name}`}>{item.content}</div>\n                    );\n                    if (item.align === 'center'"}},{"format":"tsx","foundDate":1660288307267,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/bottom-area.tsx","start":{"line":1,"column":1,"position":0},"end":{"line":54,"column":18,"position":503},"range":[0,1783],"fragment":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            const itemsValue = area.items.value;\n            if (!itemsValue.length) {\n                return null;\n            }\n\n            itemsValue\n                .slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`bottom-area-${item.name}`}>\n                            {item.content}\n                        </div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-bottom-area"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/top-area.tsx","start":{"line":1,"column":1,"position":0},"end":{"line":47,"column":15,"position":467},"range":[0,1598],"fragment":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            area.items.value\n                .slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`top-area-${item.name}`}>{item.content}</div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-top-area"}},{"format":"typescript","foundDate":1660288307453,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/area.ts","start":{"line":43,"column":9,"position":396},"end":{"line":51,"column":3,"position":487},"range":[1073,1330],"fragment":"(nameOrItem?: T | string | null) {\n        let item: any = nameOrItem;\n        if (nameOrItem && typeof nameOrItem === 'string') {\n            item = this.get(nameOrItem);\n        }\n        if (!isPanel(item)) {\n            item = null;\n        }\n        if"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/area.ts","start":{"line":22,"column":7,"position":214},"end":{"line":30,"column":6,"position":305},"range":[532,792],"fragment":"(nameOrItem?: T | string | null) {\n        let item: any = nameOrItem;\n        if (nameOrItem && typeof nameOrItem === 'string') {\n            item = this.get(nameOrItem);\n        }\n        if (!isPanel(item)) {\n            item = null;\n        }\n        const"}},{"format":"typescript","foundDate":1660288307491,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-core/src/config.ts","start":{"line":124,"column":7,"position":738},"end":{"line":144,"column":7,"position":925},"range":[2820,3321],"fragment":") {\n        let waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        waits = waits.slice().reverse();\n        let i = waits.length;\n        while (i--) {\n            waits[i].resolve(this.get(key));\n            if (waits[i].once) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length > 0) {\n            this.waits.set(key, waits);\n        } else {\n            this.waits.delete(key);\n        }\n    }\n\n    private setWait(key: string"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-core/src/editor.ts","start":{"line":99,"column":8,"position":1019},"end":{"line":120,"column":8,"position":1208},"range":[2882,3393],"fragment":") {\n        let waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        waits = waits.slice().reverse();\n        let i = waits.length;\n        while (i--) {\n            waits[i].resolve(this.get(key));\n            if (waits[i].once) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length > 0) {\n            this.waits.set(key, waits);\n        } else {\n            this.waits.delete(key);\n        }\n    }\n\n    private setWait(\n        key: KeyType"}},{"format":"typescript","foundDate":1660288307493,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-core/src/config.ts","start":{"line":144,"column":8,"position":948},"end":{"line":153,"column":7,"position":1039},"range":[3367,3597],"fragment":") {\n        const waits = this.waits.get(key);\n        if (waits) {\n            waits.push({ resolve, once });\n        } else {\n            this.waits.set(key, [{ resolve, once }]);\n        }\n    }\n\n    private delWait(key: string"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-core/src/editor.ts","start":{"line":123,"column":5,"position":1236},"end":{"line":132,"column":8,"position":1327},"range":[3461,3692],"fragment":") {\n        const waits = this.waits.get(key);\n        if (waits) {\n            waits.push({ resolve, once });\n        } else {\n            this.waits.set(key, [{ resolve, once }]);\n        }\n    }\n\n    private delWait(key: KeyType"}},{"format":"typescript","foundDate":1660288307494,"duplicationA":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-core/src/config.ts","start":{"line":153,"column":7,"position":1040},"end":{"line":168,"column":2,"position":1174},"range":[3597,3945],"fragment":", fn: any) {\n        const waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        let i = waits.length;\n        while (i--) {\n            if (waits[i].resolve === fn) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length < 1) {\n            this.waits.delete(key);\n        }\n    }\n}"},"duplicationB":{"sourceId":"/Users/harrywan/company/git/letgo/packages/editor-core/src/editor.ts","start":{"line":132,"column":8,"position":1328},"end":{"line":148,"column":8,"position":1464},"range":[3692,4051],"fragment":", fn: any) {\n        const waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        let i = waits.length;\n        while (i--) {\n            if (waits[i].resolve === fn) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length < 1) {\n            this.waits.delete(key);\n        }\n    }\n\n    destroy"}}]}