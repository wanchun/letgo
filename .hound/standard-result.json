{"score":51.23456790123457,"report":[{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/designer/designer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IEditor, ProjectSchema } from '@webank/letgo-types';\nimport { Project } from '../project';\n\nexport interface DesignerProps {\n    editor: IEditor;\n    defaultSchema?: ProjectSchema;\n    className?: string;\n    style?: object;\n    onMount?: (designer: Designer) => void;\n    onDragstart?: (e: LocateEvent) => void;\n    onDrag?: (e: LocateEvent) => void;\n    onDragend?: (\n        e: { dragObject: DragObject; copy: boolean },\n        loc?: DropLocation,\n    ) => void;\n    [key: string]: any;\n}\n\nexport class Designer {\n    readonly editor: IEditor;\n\n    readonly project: Project;\n\n    get currentDocument() {\n        return this.project.currentDocument;\n    }\n\n    get currentHistory() {\n        return this.currentDocument?.history;\n    }\n\n    get currentSelection() {\n        return this.currentDocument?.selection;\n    }\n\n    constructor(props: DesignerProps) {\n        this.project = new Project(this, props.defaultSchema);\n    }\n\n    postEvent(event: string, ...args: any[]) {\n        this.editor.emit(`designer.${event}`, ...args);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/designer/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./designer\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './designer';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/document/document.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { uniqueId } from '@webank/letgo-utils';\nimport { RootSchema } from '@webank/letgo-types';\nimport { EventEmitter } from 'events';\nimport { RootNode, ISimulator, GetDataType } from '../types';\nimport { Designer } from '../designer';\nimport { Project } from '../project';\nimport { Node } from '../node/node';\nimport { Selection } from './selection';\n\nexport class Document {\n    readonly project: Project;\n\n    readonly designer: Designer;\n\n    /**\n     * 操作记录控制\n     */\n    readonly history: History;\n\n    /**\n     * 选区控制\n     */\n    readonly selection: Selection = new Selection(this);\n\n    private _nodesMap = new Map<string, Node>();\n\n    private nodes = new Set<Node>();\n\n    private seqId = 0;\n\n    private emitter = new EventEmitter();\n\n    private isMounted = false;\n\n    private _blank?: boolean;\n\n    /**\n     * 根节点 类型有：Page/Component\n     */\n    rootNode: RootNode | null;\n\n    /**\n     * 文档编号\n     */\n    id: string = uniqueId('doc');\n\n    /**\n     * 模拟器\n     */\n    get simulator(): ISimulator | null {\n        return this.project.simulator;\n    }\n\n    get nodesMap(): Map<string, Node> {\n        return this._nodesMap;\n    }\n\n    /**\n     * 导出 schema 数据\n     */\n    get schema(): RootSchema {\n        return this.rootNode?.schema as any;\n    }\n\n    get fileName(): string {\n        return (\n            this.rootNode?.getExtraProp('fileName', false)?.getAsString() ||\n            this.id\n        );\n    }\n\n    set fileName(fileName: string) {\n        this.rootNode?.getExtraProp('fileName', true)?.setValue(fileName);\n    }\n\n    get isActive(): boolean {\n        return this.project.currentDocument.value === this;\n    }\n\n    get root() {\n        return this.rootNode;\n    }\n\n    get focusNode() {\n        const selector = this.designer.editor?.get<\n            ((rootNode: RootNode) => Node) | null\n        >('focusNodeSelector');\n        if (selector && typeof selector === 'function') {\n            return selector(this.rootNode!);\n        }\n        return this.rootNode;\n    }\n\n    constructor(project: Project, schema?: RootSchema) {\n        this.project = project;\n        this.designer = this.project?.designer;\n\n        if (!schema) {\n            this._blank = true;\n        }\n\n        // // 兼容 vision\n        // this.id = project.getSchema()?.id || this.id;\n\n        // this.rootNode = this.createNode<RootNode>(\n        //     schema || {\n        //         componentName: 'Page',\n        //         id: 'root',\n        //         fileName: '',\n        //     },\n        // );\n\n        this.isMounted = true;\n    }\n\n    /**\n     * 从项目中移除\n     */\n    destroy() {\n        this.designer.postEvent('document.destroy', { id: this.id });\n        this.purge();\n        this.project.removeDocument(this);\n    }\n\n    purge() {\n        this.rootNode?.purge();\n        this.nodes.clear();\n        this._nodesMap.clear();\n        this.rootNode = null;\n    }\n\n    isBlank() {\n        return this._blank;\n    }\n\n    /**\n     * 根据 schema 创建一个节点\n     */\n    createNode<T extends Node = Node, C = undefined>(\n        data: GetDataType<C, T>,\n        checkId = true,\n    ): T {}\n\n    /**\n     * 移除一个节点\n     */\n    removeNode(idOrNode: string | Node) {}\n\n    /**\n     * 根据 id 获取节点\n     */\n    getNode(id: string): Node | null {\n        return this._nodesMap.get(id) || null;\n    }\n\n    /**\n     * 是否存在节点\n     */\n    hasNode(id: string): boolean {\n        const node = this.getNode(id);\n        return node ? !node.isPurged : false;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/document/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./document\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './document';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/document/selection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { reactive } from 'vue';\nimport { EventEmitter } from 'events';\nimport { Node, comparePosition, PositionNO } from './node/node';\nimport { Document } from './document';\n\nexport class Selection {\n    private emitter = new EventEmitter();\n\n    private _selected: string[] = reactive([]);\n\n    constructor(readonly doc: Document) {}\n    /**\n     * 选中的节点 id\n     */\n    get selected(): string[] {\n        return this._selected;\n    }\n\n    /**\n     * 选中\n     */\n    select(id: string) {\n        if (this._selected.length === 1 && this._selected.indexOf(id) > -1) {\n            // avoid cause reaction\n            return;\n        }\n        this._selected = [id];\n        this.emitter.emit('selectionchange', this._selected);\n    }\n\n    /**\n     * 批量选中\n     */\n    selectAll(ids: string[]) {\n        this._selected = ids;\n        this.emitter.emit('selectionchange', this._selected);\n    }\n\n    /**\n     * 清除选中\n     */\n    clear() {\n        if (this._selected.length < 1) {\n            return;\n        }\n        this._selected = [];\n        this.emitter.emit('selectionchange', this._selected);\n    }\n\n    /**\n     * 整理选中\n     */\n    dispose() {\n        const l = this._selected.length;\n        let i = l;\n        while (i-- > 0) {\n            const id = this._selected[i];\n            if (!this.doc.hasNode(id)) {\n                this._selected.splice(i, 1);\n            }\n        }\n        if (this._selected.length !== l) {\n            this.emitter.emit('selectionchange', this._selected);\n        }\n    }\n\n    /**\n     * 添加选中\n     */\n    add(id: string) {\n        if (this._selected.indexOf(id) > -1) {\n            return;\n        }\n\n        this._selected.push(id);\n        this.emitter.emit('selectionchange', this._selected);\n    }\n\n    /**\n     * 是否选中\n     */\n    has(id: string) {\n        return this._selected.indexOf(id) > -1;\n    }\n\n    /**\n     * 移除选中\n     */\n    remove(id: string) {\n        const i = this._selected.indexOf(id);\n        if (i > -1) {\n            this._selected.splice(i, 1);\n            this.emitter.emit('selectionchange', this._selected);\n        }\n    }\n\n    /**\n     * 选区是否包含节点\n     */\n    containsNode(node: Node, excludeRoot = false) {\n        for (const id of this._selected) {\n            const parent = this.doc.getNode(id);\n            if (excludeRoot && parent?.contains(this.doc.focusNode)) {\n                continue;\n            }\n            if (parent?.contains(node)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取选中的节点\n     */\n    getNodes(): Node[] {\n        const nodes = [];\n        for (const id of this._selected) {\n            const node = this.doc.getNode(id);\n            if (node) {\n                nodes.push(node);\n            }\n        }\n        return nodes;\n    }\n\n    /**\n     * 获取顶层选区节点, 场景：拖拽时，建立蒙层，只蒙在最上层\n     */\n    getTopNodes(includeRoot = false) {\n        const nodes = [];\n        for (const id of this._selected) {\n            const node = this.doc.getNode(id);\n            // 排除根节点\n            if (!node || (!includeRoot && node.contains(this.doc.focusNode))) {\n                continue;\n            }\n            let i = nodes.length;\n            let isTop = true;\n            while (i-- > 0) {\n                const n = comparePosition(nodes[i], node);\n                // nodes[i] contains node\n                if (n === PositionNO.Contains || n === PositionNO.TheSame) {\n                    isTop = false;\n                    break;\n                }\n                // node contains nodes[i], delete nodes[i]\n                if (n === PositionNO.ContainedBy) {\n                    nodes.splice(i, 1);\n                }\n            }\n            // node is top item, push to nodes\n            if (isTop) {\n                nodes.push(node);\n            }\n        }\n        return nodes;\n    }\n\n    onSelectionChange(fn: (ids: string[]) => void): () => void {\n        this.emitter.on('selectionchange', fn);\n        return () => {\n            this.emitter.removeListener('selectionchange', fn);\n        };\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./project\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":26},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./designer\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './project';\nexport * from './designer';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/node/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./node\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":23},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./node-children\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './node';\nexport * from './node-children';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/node/node-children.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/node/node.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NodeSchema } from '@webank/letgo-types';\nimport { EventEmitter } from 'events';\nimport {} from 'vue';\n\nexport class Node<Schema extends NodeSchema = NodeSchema> {\n    private emitter: EventEmitter;\n\n    /**\n     * 是节点实例\n     */\n    readonly isNode = true;\n\n    /**\n     * 节点 id\n     */\n    readonly id: string;\n\n    /**\n     * 节点组件类型\n     * 特殊节点:\n     *  * Page 页面\n     *  * Block 区块\n     *  * Component 组件/元件\n     *  * Fragment 碎片节点，无 props，有指令\n     *  * Leaf 文字节点 | 表达式节点，无 props，无指令？\n     *  * Slot 插槽节点，无 props，正常 children，有 slotArgs，有指令\n     */\n    readonly componentName: string;\n\n    /**\n     * 属性抽象\n     */\n    props: Props;\n\n    private _children?: NodeChildren;\n\n    private _parent: ParentalNode | null = null;\n\n    /**\n     * 父级节点\n     */\n    get parent(): ParentalNode | null {\n        return this._parent;\n    }\n\n    /**\n     * 当前节点子集\n     */\n    get children(): NodeChildren | null {\n        return this._children || null;\n    }\n\n    get zLevel(): number {\n        if (this._parent) {\n            return this._parent.zLevel + 1;\n        }\n        return 0;\n    }\n\n    getProp(path: string, createIfNone = true): Prop | null {\n        return this.props.query(path, createIfNone) || null;\n    }\n\n    getExtraProp(key: string, createIfNone = true): Prop | null {\n        return this.props.get(getConvertedExtraKey(key), createIfNone) || null;\n    }\n\n    setExtraProp(key: string, value: CompositeValue) {\n        this.getProp(getConvertedExtraKey(key), true)?.setValue(value);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/project/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./project\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './project';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/project/project-view.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/project/project.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { shallowRef, ShallowRef, watchEffect } from 'vue';\nimport { EventEmitter } from 'events';\nimport { ProjectSchema, RootSchema } from '@webank/letgo-types';\nimport { ISimulator, isDocument } from '../types';\nimport { Designer } from '../designer';\nimport { Document } from '../document';\n\nexport class Project {\n    private emitter = new EventEmitter();\n\n    private data: ProjectSchema = {\n        version: '1.0.0',\n        componentsMap: [],\n        componentsTree: [],\n    };\n\n    private _simulator?: ISimulator;\n\n    private documentsMap = new Map<string, Document>();\n\n    private documents: Document[] = [];\n\n    private _config: any = {};\n\n    currentDocument: ShallowRef<Document | null> = shallowRef();\n    /**\n     * 模拟器\n     */\n    get simulator(): ISimulator | null {\n        return this._simulator || null;\n    }\n\n    get config(): any {\n        // TODO: parse layout Component\n        return this._config;\n    }\n\n    set config(value: any) {\n        this._config = value;\n    }\n\n    constructor(readonly designer: Designer, schema?: ProjectSchema) {\n        watchEffect(() => {\n            this.emitter.emit('current-document.change', this.currentDocument);\n        });\n        this.load(schema);\n    }\n\n    load(schema?: ProjectSchema, autoOpen?: boolean | string) {\n        this.unload();\n        // load new document\n        this.data = {\n            version: '1.0.0',\n            componentsMap: [],\n            componentsTree: [],\n            ...schema,\n        };\n        this.config = schema?.config || this.config;\n\n        if (autoOpen) {\n            if (autoOpen === true) {\n                // auto open first document or open a blank page\n                // this.open(this.data.componentsTree[0]);\n                const documentInstances = this.data.componentsTree.map((data) =>\n                    this.createDocument(data),\n                );\n                this.open(documentInstances[0]);\n            } else {\n                // auto open should be string of fileName\n                this.open(autoOpen);\n            }\n        }\n    }\n\n    /**\n     * 卸载当前项目数据\n     */\n    unload() {\n        if (this.documents.length < 1) {\n            return;\n        }\n        for (let i = this.documents.length - 1; i >= 0; i--) {\n            this.documents[i].destroy();\n        }\n    }\n\n    open(doc: string | Document | RootSchema): Document | null {\n        if (typeof doc === 'string') {\n            const got = this.documents.find(\n                (item) => item.fileName === doc || item.id === doc,\n            );\n            if (got) {\n                this.currentDocument.value = got;\n                return got;\n            }\n\n            const data = this.data.componentsTree.find(\n                (data) => data.fileName === doc,\n            );\n            if (data) {\n                doc = this.createDocument(data);\n                this.currentDocument.value = got;\n                return got;\n            }\n            return null;\n        }\n        if (isDocument(doc)) {\n            this.currentDocument.value = doc;\n            return doc;\n        }\n\n        doc = this.createDocument(doc);\n        this.currentDocument.value = doc;\n        return doc;\n    }\n\n    createDocument(data?: RootSchema): Document {\n        const doc = new Document(this, data || this?.data?.componentsTree?.[0]);\n        this.documents.push(doc);\n        this.documentsMap.set(doc.id, doc);\n        return doc;\n    }\n\n    removeDocument(doc: Document) {\n        const index = this.documents.indexOf(doc);\n        if (index < 0) {\n            return;\n        }\n        this.documents.splice(index, 1);\n        this.documentsMap.delete(doc.id);\n    }\n\n    findDocument(id: string): Document | null {\n        // 此处不能使用 this.documentsMap.get(id)，因为在乐高 rollback 场景，document.id 会被改成其他值\n        return this.documents.find((doc) => doc.id === id) || null;\n    }\n\n    /**\n     * 分字段设置储存数据，不记录操作记录\n     */\n    set(\n        key:\n            | 'version'\n            | 'componentsTree'\n            | 'componentsMap'\n            | 'utils'\n            | 'constants'\n            | 'i18n'\n            | 'css'\n            | 'dataSource'\n            | string,\n        value: any,\n    ): void {\n        if (key === 'config') {\n            this.config = value;\n        }\n        Object.assign(this.data, { [key]: value });\n    }\n\n    /**\n     * 分字段设置储存数据\n     */\n    get(\n        key:\n            | 'version'\n            | 'componentsTree'\n            | 'componentsMap'\n            | 'utils'\n            | 'constants'\n            | 'i18n'\n            | 'css'\n            | 'dataSource'\n            | 'config'\n            | string,\n    ): any {\n        if (key === 'config') {\n            return this.config;\n        }\n        return Reflect.get(this.data, key);\n    }\n\n    onCurrentDocumentChange(fn: (doc: Document) => void): () => void {\n        this.emitter.on('current-document.change', fn);\n        return () => {\n            this.emitter.removeListener('current-document.change', fn);\n        };\n    }\n\n    private mountSimulator(simulator: ISimulator) {\n        // TODO: 多设备 simulator 支持\n        this._simulator = simulator;\n        this.designer.editor.set('simulator', simulator);\n        this.emitter.emit('letgo_engine_simulator_ready', simulator);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/designer/src/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NodeSchema, PageSchema, ComponentSchema } from '@webank/letgo-types';\nimport { Node, NodeChildren } from './node';\nimport { Document } from './document';\n\nexport interface ISimulator {\n    readonly isSimulator: true;\n}\n\nexport type GetDataType<T, NodeType> = T extends undefined\n    ? NodeType extends {\n          schema: infer R;\n      }\n        ? R\n        : any\n    : T;\n\nexport interface ParentalNode<T extends NodeSchema = NodeSchema>\n    extends Node<T> {\n    readonly children: NodeChildren;\n}\n\nexport interface LeafNode extends Node {\n    readonly children: null;\n}\n\nexport type PageNode = ParentalNode<PageSchema>;\n\nexport type ComponentNode = ParentalNode<ComponentSchema>;\n\nexport type RootNode = PageNode | ComponentNode;\n\nexport function isNode(node: any): node is Node {\n    return node && node.isNode;\n}\n\nexport function isRootNode(node: Node): node is RootNode {\n    return node && node.isRoot();\n}\n\nexport function isDocument(obj: any): obj is Document {\n    return obj && obj.rootNode;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-core/src/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { get as lodashGet, isPlainObject } from 'lodash-es';\n\nexport interface EngineOptions {\n    /**\n     * 设备类型，默认值：'default'\n     */\n    device?: 'default' | 'mobile' | string;\n    /**\n     * 指定初始化的 deviceClassName，挂载到画布的顶层节点上\n     */\n    deviceClassName?: string;\n    /**\n     * 设备类型映射器，处理设计器与渲染器中 device 的映射\n     */\n    deviceMapper?: {\n        transform: (originalDevice: string) => string;\n    };\n}\n\nexport class EngineConfig {\n    private config: { [key: string]: any } = {};\n\n    private waits = new Map<\n        string,\n        Array<{\n            once?: boolean;\n            resolve: (data: any) => void;\n        }>\n    >();\n\n    constructor(config?: { [key: string]: any }) {\n        this.config = config || {};\n    }\n\n    /**\n     * 判断指定 key 是否有值\n     * @param key\n     * @returns\n     */\n    has(key: string): boolean {\n        return this.config[key] !== undefined;\n    }\n\n    /**\n     * 获取指定 key 的值\n     * @param key\n     * @param defaultValue\n     * @returns\n     */\n    get(key: string, defaultValue?: any): any {\n        return lodashGet(this.config, key, defaultValue);\n    }\n\n    /**\n     * 设置指定 key 的值\n     * @param key\n     * @param value\n     */\n    set(key: string, value: any) {\n        this.config[key] = value;\n        this.notifyGot(key);\n    }\n\n    /**\n     * 批量设值，set 的对象版本\n     * @param config\n     */\n    setConfig(config: { [key: string]: any }) {\n        if (config) {\n            Object.keys(config).forEach((key) => {\n                this.set(key, config[key]);\n            });\n        }\n    }\n\n    /**\n     * if engineOptions.strictPluginMode === true, only accept propertied predefined in EngineOptions.\n     *\n     * @param {EngineOptions} engineOptions\n     * @memberof EngineConfig\n     */\n    setEngineOptions(engineOptions: EngineOptions) {\n        if (!engineOptions || !isPlainObject(engineOptions)) {\n            return;\n        }\n        this.setConfig(engineOptions as any);\n    }\n\n    /**\n     * 获取指定 key 的值，若此时还未赋值，则等待，若已有值，则直接返回值\n     *  注：此函数返回 Promise 实例，只会执行（fullfill）一次\n     * @param key\n     * @returns\n     */\n    onceGot(key: string): Promise<any> {\n        const val = this.config[key];\n        if (val !== undefined) {\n            return Promise.resolve(val);\n        }\n        return new Promise((resolve) => {\n            this.setWait(key, resolve, true);\n        });\n    }\n\n    /**\n     * 获取指定 key 的值，函数回调模式，若多次被赋值，回调会被多次调用\n     * @param key\n     * @param fn\n     * @returns\n     */\n    onGot(key: string, fn: (data: any) => void): () => void {\n        const val = this.config?.[key];\n        if (val !== undefined) {\n            fn(val);\n            return () => void 0;\n        } else {\n            this.setWait(key, fn);\n            return () => {\n                this.delWait(key, fn);\n            };\n        }\n    }\n\n    private notifyGot(key: string) {\n        let waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        waits = waits.slice().reverse();\n        let i = waits.length;\n        while (i--) {\n            waits[i].resolve(this.get(key));\n            if (waits[i].once) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length > 0) {\n            this.waits.set(key, waits);\n        } else {\n            this.waits.delete(key);\n        }\n    }\n\n    private setWait(key: string, resolve: (data: any) => void, once?: boolean) {\n        const waits = this.waits.get(key);\n        if (waits) {\n            waits.push({ resolve, once });\n        } else {\n            this.waits.set(key, [{ resolve, once }]);\n        }\n    }\n\n    private delWait(key: string, fn: any) {\n        const waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        let i = waits.length;\n        while (i--) {\n            if (waits[i].resolve === fn) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length < 1) {\n            this.waits.delete(key);\n        }\n    }\n}\n\nexport const engineConfig = new EngineConfig();\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-core/src/editor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StrictEventEmitter } from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport {\n    IEditor,\n    KeyType,\n    GlobalEvent,\n    GetReturnType,\n    AssetsJson,\n} from '@webank/letgo-types';\n\nexport declare interface Editor\n    extends StrictEventEmitter<EventEmitter, GlobalEvent.EventConfig> {\n    addListener(\n        event: string | symbol,\n        listener: (...args: any[]) => void,\n    ): this;\n    once(event: string | symbol, listener: (...args: any[]) => void): this;\n    removeListener(\n        event: string | symbol,\n        listener: (...args: any[]) => void,\n    ): this;\n    off(event: string | symbol, listener: (...args: any[]) => void): this;\n    removeAllListeners(event?: string | symbol): this;\n    setMaxListeners(n: number): this;\n    getMaxListeners(): number;\n    listeners(event: string | symbol): (() => void)[];\n    rawListeners(event: string | symbol): (() => void)[];\n    listenerCount(type: string | symbol): number;\n    // Added in Node 6...\n    prependListener(\n        event: string | symbol,\n        listener: (...args: any[]) => void,\n    ): this;\n    prependOnceListener(\n        event: string | symbol,\n        listener: (...args: any[]) => void,\n    ): this;\n    eventNames(): Array<string | symbol>;\n}\n\nexport class Editor extends (EventEmitter as any) implements IEditor {\n    private context = new Map<KeyType, any>();\n\n    async setAssets(assets: AssetsJson) {\n        this.set('assets', assets);\n    }\n\n    get<T = undefined, KeyOrType = any>(\n        keyOrType: KeyOrType,\n    ): GetReturnType<T, KeyOrType> | undefined {\n        return this.context.get(keyOrType as any);\n    }\n\n    has(keyOrType: KeyType): boolean {\n        return this.context.has(keyOrType);\n    }\n\n    set(key: KeyType, data: any): void {\n        this.context.set(key, data);\n        this.notifyGot(key);\n    }\n\n    onceGot<T = undefined, KeyOrType extends KeyType = any>(\n        keyOrType: KeyOrType,\n    ): Promise<GetReturnType<T, KeyOrType>> {\n        const x = this.context.get(keyOrType);\n        if (x !== undefined) {\n            return Promise.resolve(x);\n        }\n        return new Promise((resolve) => {\n            this.setWait(keyOrType, resolve, true);\n        });\n    }\n\n    onGot<T = undefined, KeyOrType extends KeyType = any>(\n        keyOrType: KeyOrType,\n        fn: (data: GetReturnType<T, KeyOrType>) => void,\n    ): () => void {\n        const x = this.context.get(keyOrType);\n        if (x !== undefined) {\n            fn(x);\n            return () => void 0;\n        } else {\n            this.setWait(keyOrType, fn);\n            return () => {\n                this.delWait(keyOrType, fn);\n            };\n        }\n    }\n\n    private waits = new Map<\n        KeyType,\n        Array<{\n            once?: boolean;\n            resolve: (data: any) => void;\n        }>\n    >();\n\n    private notifyGot(key: KeyType) {\n        let waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        waits = waits.slice().reverse();\n        let i = waits.length;\n        while (i--) {\n            waits[i].resolve(this.get(key));\n            if (waits[i].once) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length > 0) {\n            this.waits.set(key, waits);\n        } else {\n            this.waits.delete(key);\n        }\n    }\n\n    private setWait(\n        key: KeyType,\n        resolve: (data: any) => void,\n        once?: boolean,\n    ) {\n        const waits = this.waits.get(key);\n        if (waits) {\n            waits.push({ resolve, once });\n        } else {\n            this.waits.set(key, [{ resolve, once }]);\n        }\n    }\n\n    private delWait(key: KeyType, fn: any) {\n        const waits = this.waits.get(key);\n        if (!waits) {\n            return;\n        }\n        let i = waits.length;\n        while (i--) {\n            if (waits[i].resolve === fn) {\n                waits.splice(i, 1);\n            }\n        }\n        if (waits.length < 1) {\n            this.waits.delete(key);\n        }\n    }\n\n    destroy(): void {\n        this.context.clear();\n    }\n}\n\nexport const editor = new Editor();\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-core/src/hotkey.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-core/src/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./editor\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./config\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./hotkey\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./setters\"","line":4,"column":15,"nodeType":"Literal","endLine":4,"endColumn":26}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './editor';\nexport * from './config';\nexport * from './hotkey';\nexport * from './setters';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-core/src/setters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/area.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { shallowRef, Ref } from 'vue';\nimport { IWidgetBaseConfig, IWidget, isPanel } from './types';\nimport { Skeleton } from './skeleton';\n\nexport class Area<C extends IWidgetBaseConfig, T extends IWidget = IWidget> {\n    private _items: Ref<T[]> = shallowRef([]);\n\n    private _itemMaps: { [name: string]: T } = {};\n\n    private _current: Ref<T | null> = shallowRef(null);\n\n    handle: (config: C | T) => T;\n\n    get items() {\n        return this._items;\n    }\n\n    get current() {\n        return this._current;\n    }\n\n    active(nameOrItem?: T | string | null) {\n        let item: any = nameOrItem;\n        if (nameOrItem && typeof nameOrItem === 'string') {\n            item = this.get(nameOrItem);\n        }\n        if (!isPanel(item)) {\n            item = null;\n        }\n        const currentItem = this._current.value;\n        if (currentItem === item) {\n            return;\n        }\n        if (currentItem) {\n            currentItem.hide();\n        }\n        this._current.value = item;\n        if (item) {\n            item.show();\n        }\n    }\n\n    unActive(nameOrItem?: T | string | null) {\n        let item: any = nameOrItem;\n        if (nameOrItem && typeof nameOrItem === 'string') {\n            item = this.get(nameOrItem);\n        }\n        if (!isPanel(item)) {\n            item = null;\n        }\n        if (this._current.value === item) {\n            this._current.value = null;\n        }\n        if (item) {\n            item.hide();\n        }\n    }\n\n    unActiveAll() {\n        Object.keys(this._itemMaps).forEach((name) => this.unActive(name));\n    }\n\n    constructor(\n        readonly skeleton: Skeleton,\n        readonly name: string,\n        handle: (item: T | C) => T,\n    ) {\n        this.skeleton = skeleton;\n        this.name = name;\n        this.handle = handle;\n    }\n\n    isEmpty(): boolean {\n        return this._items.value.length < 1;\n    }\n\n    add(config: T | C): T {\n        const item = this.get(config.name);\n        if (item) {\n            return item;\n        }\n        const newItem = this.handle(config);\n        this._items.value = [...this._items.value, newItem];\n        this._itemMaps[config.name] = newItem;\n        if (isPanel(newItem)) {\n            newItem.setParent(this);\n        }\n        return newItem;\n    }\n\n    remove(item: string | T): number {\n        const thing = typeof item === 'string' ? this.get(item) : item;\n        if (!thing) {\n            return -1;\n        }\n        const itemValues = this._items.value;\n        const i = itemValues.indexOf(thing);\n        if (i > -1) {\n            this._items.value = itemValues.splice(i, 1);\n        }\n        delete this._itemMaps[thing.name];\n        if (thing === this.current.value) {\n            this._current.value = null;\n        }\n        return i;\n    }\n\n    get(name: string): T | null {\n        return this._itemMaps[name] || null;\n    }\n\n    getAt(index: number): T | null {\n        return this._items.value[index] || null;\n    }\n\n    indexOf(item: T): number {\n        return this._items.value.indexOf(item);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./layouts/workbench\"","line":1,"column":38,"nodeType":"Literal","endLine":1,"endColumn":59},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./skeleton\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":27},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./types\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { default as Workbench } from './layouts/workbench';\nexport * from './skeleton';\nexport * from './types';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/bottom-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            const itemsValue = area.items.value;\n            if (!itemsValue.length) {\n                return null;\n            }\n\n            itemsValue\n                .slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`bottom-area-${item.name}`}>\n                            {item.content}\n                        </div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-bottom-area\">\n                    <div class=\"letgo-bottom-area-left\">{left}</div>\n                    <div class=\"letgo-bottom-area-center\">{center}</div>\n                    <div class=\"letgo-bottom-area-right\">{right}</div>\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/global-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType } from 'vue';\nimport { Area } from '../area';\nimport { IModalConfig } from '../types';\nimport { Modal } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<Area<IModalConfig, Modal>>,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            return (\n                <div class=\"letgo-global-area\">\n                    {area.items.value.map((item) => item.content)}\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/left-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        const { area } = props;\n        const top: VNode[] = [];\n        const bottom: VNode[] = [];\n        area.items.value\n            .slice()\n            .sort((a, b) => {\n                const index1 = a.config?.index || 0;\n                const index2 = b.config?.index || 0;\n                return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n            })\n            .forEach((item) => {\n                const content = (\n                    <div key={`left-area-${item.name}`}>{item.content}</div>\n                );\n                if (item.align === 'bottom') {\n                    bottom.push(content);\n                } else {\n                    top.push(content);\n                }\n            });\n        return () => {\n            return (\n                <div class={'letgo-left-area'}>\n                    <div class=\"letgo-left-area-top\">{top}</div>\n                    <div class=\"letgo-left-area-bottom\">{bottom}</div>\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/left-float-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType, ref, Ref, CSSProperties } from 'vue';\nimport { CloseOutlined, PasswordOutlined } from '@fesjs/fes-design/icon';\nimport { Area } from '../area';\nimport { IPanelConfig } from '../types';\nimport { Panel } from '../widget';\nimport { computed } from '@vue/reactivity';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<Area<IPanelConfig, Panel>>,\n        },\n    },\n    setup(props) {\n        const isFixedRef = ref(true);\n        const style: Ref<CSSProperties> = computed(() => {\n            const { current, items } = props.area;\n            if (!items.value.length || !current.value) {\n                return {\n                    display: 'none',\n                };\n            }\n            const currentProps = current.value?.props || {};\n            if (isFixedRef.value) {\n                return {\n                    width: currentProps.width,\n                    height: currentProps.height,\n                    maxHeight: currentProps.maxHeight,\n                    maxWidth: currentProps.maxWidth,\n                };\n            }\n            return {\n                position: 'relative',\n                left: 0,\n                width: currentProps.width,\n                height: currentProps.height,\n                maxHeight: currentProps.maxHeight,\n                maxWidth: currentProps.maxWidth,\n                marginLeft: '1px',\n                boxShadow: 'none',\n            };\n        });\n        const toggleFixed = () => {\n            isFixedRef.value = !isFixedRef.value;\n        };\n        const handleClose = () => {\n            props.area.unActiveAll();\n        };\n        return () => {\n            const { area } = props;\n            const { current, items } = area;\n            const currentProps = current.value?.props || {};\n            return (\n                <div class=\"letgo-left-float-area\" style={style.value}>\n                    <div class=\"letgo-left-float-area-header\">\n                        {currentProps.title}\n                        <div class=\"area-header-icons\">\n                            <PasswordOutlined\n                                class=\"header-icon\"\n                                onClick={toggleFixed}\n                            />\n                            <CloseOutlined\n                                class=\"header-icon\"\n                                onClick={handleClose}\n                            />\n                        </div>\n                    </div>\n                    <div class=\"letgo-left-float-area-body\">\n                        {items.value.map((item) => item.content)}\n                    </div>\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/main-area.tsx","messages":[{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","line":5,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedSingleBlock","endLine":7,"endColumn":10,"fix":{"range":[108,177],"text":"<div class={'letgo-main-area'}></div>"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { defineComponent } from 'vue';\n\nexport default defineComponent({\n    setup() {\n        return () => {\n            return <div class={'letgo-main-area'}></div>;\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/right-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType } from 'vue';\nimport { Area } from '../area';\nimport { IPanelConfig } from '../types';\nimport { Panel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<Area<IPanelConfig, Panel>>,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            return (\n                <div v-show={area.items.value.length} class=\"letgo-right-area\">\n                    {area.items.value.map((item) => item.content)}\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            const itemsValue = area.items.value;\n            if (!itemsValue.length) {\n                return null;\n            }\n\n            itemsValue\n                .slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`toolbar-${item.name}`}>{item.content}</div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-toolbar\">\n                    <div class=\"letgo-toolbar-left\">{left}</div>\n                    <div class=\"letgo-toolbar-center\">{center}</div>\n                    <div class=\"letgo-toolbar-right\">{right}</div>\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/top-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType, VNode } from 'vue';\nimport { Area } from '../area';\nimport {\n    IWidgetConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n} from '../types';\nimport { Widget, WidgetModal, WidgetPanel } from '../widget';\n\nexport default defineComponent({\n    props: {\n        area: {\n            type: Object as PropType<\n                Area<\n                    IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n                    Widget | WidgetModal | WidgetPanel\n                >\n            >,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { area } = props;\n            const left: VNode[] = [];\n            const center: VNode[] = [];\n            const right: VNode[] = [];\n            area.items.value\n                .slice()\n                .sort((a, b) => {\n                    const index1 = a.config?.index || 0;\n                    const index2 = b.config?.index || 0;\n                    return index1 === index2 ? 0 : index1 > index2 ? 1 : -1;\n                })\n                .forEach((item) => {\n                    const content = (\n                        <div key={`top-area-${item.name}`}>{item.content}</div>\n                    );\n                    if (item.align === 'center') {\n                        center.push(content);\n                    } else if (item.align === 'left') {\n                        left.push(content);\n                    } else {\n                        right.push(content);\n                    }\n                });\n            return (\n                <div class=\"letgo-top-area\">\n                    <div class=\"letgo-top-area-left\">{left}</div>\n                    <div class=\"letgo-top-area-center\">{center}</div>\n                    <div class=\"letgo-top-area-right\">{right}</div>\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/layouts/workbench.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType } from 'vue';\nimport { Skeleton } from '../skeleton';\nimport TopArea from './top-area';\nimport LeftArea from './left-area';\nimport LeftFloatArea from './left-float-area';\nimport Toolbar from './toolbar';\nimport MainArea from './main-area';\nimport BottomArea from './bottom-area';\nimport RightArea from './right-area';\nimport GlobalArea from './global-area';\nimport './workbench.less';\n\nexport default defineComponent({\n    props: {\n        skeleton: {\n            type: Object as PropType<Skeleton>,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { skeleton } = props;\n            return (\n                <div class={'letgo-workbench'}>\n                    <TopArea area={skeleton.topArea} />\n                    <div className=\"letgo-workbench-body\">\n                        <LeftArea area={skeleton.leftArea} />\n                        <LeftFloatArea area={skeleton.leftFloatArea} />\n                        <div className=\"letgo-workbench-center\">\n                            <Toolbar area={skeleton.toolbar} />\n                            <MainArea />\n                            <BottomArea area={skeleton.bottomArea} />\n                        </div>\n                        <RightArea area={skeleton.rightArea} />\n                    </div>\n                    <GlobalArea area={skeleton.globalArea} />\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/skeleton.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Editor } from '@webank/letgo-editor-core';\nimport {\n    IWidget,\n    IWidgetBaseConfig,\n    IWidgetConfig,\n    IPanelConfig,\n    IWidgetPanelConfig,\n    IWidgetModalConfig,\n    IModalConfig,\n    isWidgetModalConfig,\n    isWidget,\n    isModalConfig,\n    isModal,\n    IPanelProps,\n    SkeletonEvents,\n    isPanel,\n    isPanelConfig,\n    isWidgetPanelConfig,\n} from './types';\nimport { Area } from './area';\nimport { Panel, Widget, Modal, WidgetModal, WidgetPanel } from './widget';\n\nexport class Skeleton {\n    readonly leftArea: Area<\n        IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n        Widget | WidgetModal | WidgetPanel\n    >;\n\n    readonly topArea: Area<\n        IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n        Widget | WidgetModal | WidgetPanel\n    >;\n\n    readonly toolbar: Area<\n        IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n        Widget | WidgetModal | WidgetPanel\n    >;\n\n    readonly bottomArea: Area<\n        IWidgetConfig | IWidgetPanelConfig | IWidgetModalConfig,\n        Widget | WidgetModal | WidgetPanel\n    >;\n\n    readonly globalArea: Area<IModalConfig, Modal>;\n\n    readonly rightArea: Area<IPanelConfig, Panel>;\n\n    readonly leftFloatArea: Area<IPanelConfig, Panel>;\n\n    readonly mainArea: Area<IWidgetConfig | IPanelConfig, Widget | Panel>;\n\n    readonly widgets: IWidget[] = [];\n\n    constructor(readonly editor: Editor) {\n        this.leftArea = new Area(this, 'leftArea', (config) => {\n            if (isWidget(config)) {\n                return config;\n            }\n            return this.createWidget(config) as Widget;\n        });\n        this.topArea = new Area(this, 'topArea', (config) => {\n            if (isWidget(config)) {\n                return config;\n            }\n            return this.createWidget(config) as Widget;\n        });\n        this.toolbar = new Area(this, 'toolbar', (config) => {\n            if (isWidget(config)) {\n                return config;\n            }\n            return this.createWidget(config) as Widget;\n        });\n        this.bottomArea = new Area(this, 'bottomArea', (config) => {\n            if (isWidget(config)) {\n                return config;\n            }\n            return this.createWidget(config) as Widget;\n        });\n        this.globalArea = new Area(this, 'globalArea', (config) => {\n            if (isModal(config)) {\n                return config;\n            }\n            return this.createWidget(config) as Modal;\n        });\n        this.rightArea = new Area(this, 'rightArea', (config) => {\n            if (isPanel(config)) {\n                return config;\n            }\n            const panel = this.createWidget(config) as Panel;\n            return panel;\n        });\n        this.leftFloatArea = new Area(this, 'leftFloatArea', (config) => {\n            if (isPanel(config)) {\n                return config;\n            }\n            const panel = this.createWidget(config) as Panel;\n            return panel;\n        });\n    }\n\n    createWidget(config: IWidgetBaseConfig | IWidget) {\n        if (isWidget(config)) {\n            return config;\n        }\n        let widget;\n        if (isModalConfig(config)) {\n            widget = new Modal(this, config as IModalConfig);\n        } else if (isWidgetModalConfig(config)) {\n            widget = new WidgetModal(this, config as IWidgetModalConfig);\n        } else if (isPanelConfig(config)) {\n            widget = new Panel(this, config as IPanelConfig);\n        } else if (isWidgetPanelConfig(config)) {\n            widget = new WidgetPanel(this, config as IWidgetPanelConfig);\n        } else {\n            widget = new Widget(this, config as IWidgetConfig);\n        }\n        this.widgets.push(widget);\n        return widget;\n    }\n\n    add(\n        config: IWidgetBaseConfig &\n            (IWidgetConfig | IWidgetModalConfig | IPanelProps),\n        extraConfig?: Record<string, any>,\n    ) {\n        const parsedConfig = {\n            ...config,\n            ...extraConfig,\n        };\n        const { area } = parsedConfig;\n        switch (area) {\n            case 'leftArea':\n            case 'left':\n                return this.leftArea.add(parsedConfig as IWidgetConfig);\n            case 'topArea':\n            case 'top':\n                return this.topArea.add(parsedConfig as IWidgetConfig);\n            case 'global':\n            case 'globalArea':\n                return this.globalArea.add(parsedConfig as IModalConfig);\n            case 'right':\n            case 'rightArea':\n                return this.rightArea.add(parsedConfig as IPanelConfig);\n            case 'toolbar':\n                return this.toolbar.add(parsedConfig as IWidgetConfig);\n            case 'bottom':\n            case 'bottomArea':\n                return this.bottomArea.add(parsedConfig as IWidgetConfig);\n            case 'leftFloatArea':\n                return this.leftFloatArea.add(parsedConfig as IPanelConfig);\n\n            default:\n            // do nothing\n        }\n    }\n\n    postEvent(event: SkeletonEvents, ...args: any[]) {\n        this.editor.emit(event, ...args);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { VNode, Ref, VNodeTypes } from 'vue';\nimport { Skeleton } from './skeleton';\nimport { Editor } from '@webank/letgo-editor-core';\nimport { Modal, Panel } from './widget';\n\n/**\n * 所有可能的停靠位置\n */\nexport type IWidgetConfigArea =\n    | 'leftArea'\n    | 'left'\n    | 'rightArea'\n    | 'right'\n    | 'topArea'\n    | 'top'\n    | 'toolbar'\n    | 'mainArea'\n    | 'main'\n    | 'center'\n    | 'centerArea'\n    | 'bottomArea'\n    | 'bottom'\n    | 'leftFloatArea'\n    | 'global'\n    | 'globalArea';\n\nexport interface IContentArgument {\n    config: IWidgetBaseConfig;\n    editor: Editor;\n}\n\nexport interface IWidgetBaseConfig {\n    type: string;\n    name: string;\n    area: IWidgetConfigArea;\n    props?: Record<string, any>;\n    content: (arg: IContentArgument) => VNode | string;\n    // index?: number;\n    [extra: string]: any;\n}\n\nexport interface IWidgetProps {\n    align?: 'left' | 'right' | 'bottom' | 'center' | 'top';\n    title?: string;\n    onInit?: (widget: IWidget) => any;\n    onClick?: (widget: IWidget) => any;\n}\n\nexport interface IWidgetConfig extends IWidgetBaseConfig {\n    type: 'Widget';\n    props?: IWidgetProps;\n}\n\nexport interface IModalProps {\n    title?: string;\n    closable?: boolean;\n    mask?: boolean;\n    maskClosable?: boolean;\n    footer?: boolean;\n    okText?: string;\n    cancelText?: string;\n    width?: string | number;\n    top?: string | number;\n    verticalCenter?: boolean;\n    center?: boolean;\n    fullScreen?: boolean;\n    contentClass?: string;\n    getContainer?: () => HTMLElement;\n    onOk?: (widget: IWidget) => any;\n    onCancel?: (widget: IWidget) => any;\n}\n\nexport interface IModalConfig extends IWidgetBaseConfig {\n    type: 'Modal';\n    props?: IModalProps;\n}\n\nexport function isModalConfig(obj: any): obj is IModalConfig {\n    return obj && obj.type === 'Modal';\n}\n\nexport interface IWidgetModalConfig extends IWidgetBaseConfig {\n    type: 'WidgetModal';\n    props?: IWidgetProps;\n    modalName?: string;\n    modalContent: (arg: IContentArgument) => VNode | string;\n    modalProps?: IModalProps;\n}\n\nexport function isWidgetModalConfig(obj: any): obj is IWidgetModalConfig {\n    return obj && obj.type === 'WidgetModal';\n}\n\nexport interface IPanelProps {\n    title?: string;\n    description?: string;\n    width?: number; // panel.props\n    height?: number; // panel.props\n    maxWidth?: number; // panel.props\n    maxHeight?: number; // panel.props\n}\n\nexport interface IPanelConfig extends IWidgetBaseConfig {\n    type: 'Panel';\n    props?: IPanelProps;\n}\n\nexport function isPanelConfig(obj: any): obj is IPanelConfig {\n    return obj && obj.type === 'Panel';\n}\n\nexport interface IWidgetPanelConfig extends IWidgetBaseConfig {\n    type: 'WidgetPanel';\n    props?: IWidgetProps;\n    panelName?: string;\n    panelContent: () => VNode | string;\n    panelProps?: IPanelProps & {\n        area?: IWidgetConfigArea;\n    };\n}\n\nexport function isWidgetPanelConfig(obj: any): obj is IWidgetPanelConfig {\n    return obj && obj.type === 'WidgetPanel';\n}\n\nexport interface IWidget {\n    readonly name: string;\n    readonly content: VNodeTypes;\n    readonly isWidget: true;\n    readonly visible: Ref<boolean>;\n    readonly disabled?: Ref<boolean>;\n    readonly body: VNodeTypes;\n    readonly skeleton: Skeleton;\n    readonly config: IWidgetBaseConfig;\n\n    show(): void;\n    hide(): void;\n    toggle(): void;\n    enable?(): void;\n    disable?(): void;\n}\n\nexport function isWidget(obj: any): obj is IWidget {\n    return obj && obj.isWidget;\n}\n\nexport function isModal(obj: any): obj is Modal {\n    return obj && obj.isModal;\n}\n\nexport function isPanel(obj: any): obj is Panel {\n    return obj && obj.isPanel;\n}\n\nexport enum SkeletonEvents {\n    WIDGET_SHOW = 'skeleton.widget.show',\n    WIDGET_HIDE = 'skeleton.widget.hide',\n    WIDGET_DISABLE = 'skeleton.widget.disable',\n    WIDGET_ENABLE = 'skeleton.widget.enable',\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/views/modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType } from 'vue';\nimport { FModal } from '@fesjs/fes-design';\nimport { Modal } from '../widget';\nimport './modal.less';\n\nexport default defineComponent({\n    props: {\n        widget: {\n            type: Object as PropType<Modal>,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { widget } = props;\n            if (!widget.visible.value) {\n                return null;\n            }\n            return (\n                <FModal show={true} {...widget.props}>\n                    {widget.body}\n                </FModal>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/views/panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType } from 'vue';\nimport { IWidget } from '../types';\nimport './panel.less';\n\nexport default defineComponent({\n    props: {\n        widget: {\n            type: Object as PropType<IWidget>,\n        },\n    },\n    setup(props) {\n        return () => {\n            const { widget } = props;\n            return (\n                <div v-show={widget.visible.value} class=\"letgo-panel\">\n                    {widget.body}\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/views/widget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineComponent, PropType } from 'vue';\nimport { IWidget } from '../types';\nimport './widget.less';\n\nexport default defineComponent({\n    props: {\n        widget: {\n            type: Object as PropType<IWidget>,\n        },\n    },\n    emits: ['click'],\n    setup(props, { emit }) {\n        const handleClick = (e: Event) => {\n            emit('click', e);\n        };\n        return () => {\n            const { widget } = props;\n            if (!widget.visible.value) {\n                return null;\n            }\n            if (widget.disabled.value) {\n                return (\n                    <div class={'letgo-widget letgo-widget-disabled'}>\n                        {widget.body}\n                    </div>\n                );\n            }\n            return (\n                <div class=\"letgo-widget\" onClick={handleClick}>\n                    {widget.body}\n                </div>\n            );\n        };\n    },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/baseWidget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ref, Ref, watch, VNodeTypes } from 'vue';\nimport { uniqueId } from '@webank/letgo-utils';\nimport { Skeleton } from '../skeleton';\nimport { IWidgetBaseConfig, SkeletonEvents } from '../types';\n\nexport class BaseWidget {\n    readonly isWidget = true;\n\n    readonly id = uniqueId('widget');\n\n    readonly name: string;\n\n    protected isReady = ref(false);\n\n    protected _visible = ref(true);\n\n    protected _disabled = ref(false);\n\n    protected _body: VNodeTypes;\n\n    get body() {\n        if (this.isReady.value) {\n            return this._body;\n        }\n        this.isReady.value = true;\n        const { content } = this.config;\n        this._body = content({\n            config: this.config,\n            editor: this.skeleton.editor,\n        });\n        return this._body;\n    }\n\n    protected setVisible(flag: boolean) {\n        if (flag === this._visible.value) {\n            return;\n        }\n        if (flag) {\n            this._visible.value = true;\n        } else if (this.isReady.value) {\n            this._visible.value = false;\n        }\n    }\n\n    get visible(): Ref<boolean> {\n        return this._visible;\n    }\n\n    hide() {\n        this.setVisible(false);\n    }\n\n    show() {\n        this.setVisible(true);\n    }\n\n    toggle() {\n        this.setVisible(!this._visible);\n    }\n\n    protected setDisabled(flag: boolean) {\n        if (this._disabled.value === flag) return;\n        this._disabled.value = flag;\n    }\n\n    disable() {\n        this.setDisabled(true);\n    }\n\n    enable() {\n        this.setDisabled(false);\n    }\n\n    get disabled(): Ref<boolean> {\n        return this._disabled;\n    }\n\n    constructor(\n        readonly skeleton: Skeleton,\n        readonly config: IWidgetBaseConfig,\n        visible = true,\n    ) {\n        this._visible.value = visible;\n        this.name = config.name;\n        watch(this.visible, (visible) => {\n            this.skeleton.postEvent(\n                visible\n                    ? SkeletonEvents.WIDGET_SHOW\n                    : SkeletonEvents.WIDGET_HIDE,\n                this.name,\n                this,\n            );\n        });\n        watch(this.disabled, (disabled) => {\n            this.skeleton.postEvent(\n                disabled\n                    ? SkeletonEvents.WIDGET_DISABLE\n                    : SkeletonEvents.WIDGET_ENABLE,\n                this.name,\n                this,\n            );\n        });\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./widget\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./modal\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":24},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./widget-modal\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":31},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./panel\"","line":4,"column":15,"nodeType":"Literal","endLine":4,"endColumn":24},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./widget-panel\"","line":5,"column":15,"nodeType":"Literal","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './widget';\nexport * from './modal';\nexport * from './widget-modal';\nexport * from './panel';\nexport * from './widget-panel';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/modal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { h, VNode } from 'vue';\nimport { Skeleton } from '../skeleton';\nimport { IWidget, IModalConfig, IModalProps } from '../types';\nimport ModalView from '../views/modal';\nimport { BaseWidget } from './baseWidget';\n\nexport class Modal extends BaseWidget implements IWidget {\n    readonly isModal = true;\n\n    readonly props: IModalProps;\n\n    get content(): VNode {\n        return h(ModalView, {\n            widget: this,\n            key: this.id,\n        });\n    }\n\n    constructor(readonly skeleton: Skeleton, readonly config: IModalConfig) {\n        super(skeleton, config, false);\n        const { props = {} } = config;\n        const { onOk, onCancel } = props;\n        props.onOk = () => {\n            if (onOk) {\n                onOk.call(this, this);\n            }\n        };\n        props.onCancel = () => {\n            if (onCancel) {\n                onCancel.call(this, this);\n            }\n        };\n        this.props = props;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/panel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { h, VNode } from 'vue';\nimport { Skeleton } from '../skeleton';\nimport { Area } from '../area';\nimport { IWidget, IPanelConfig, IPanelProps } from '../types';\nimport PanelView from '../views/panel';\nimport { BaseWidget } from './baseWidget';\n\nexport class Panel extends BaseWidget implements IWidget {\n    readonly isPanel = true;\n\n    readonly props: IPanelProps;\n\n    parent: Area<any, any>;\n\n    setParent(parent: Area<any, any>) {\n        if (parent === this.parent) {\n            return;\n        }\n        if (this.parent) {\n            this.parent.remove(this);\n        }\n        this.parent = parent;\n    }\n\n    get content(): VNode {\n        return h(PanelView, {\n            widget: this,\n            key: this.id,\n        });\n    }\n\n    protected setVisible(flag: boolean) {\n        if (flag === this._visible.value) {\n            return;\n        }\n        if (flag) {\n            this._visible.value = true;\n            this.parent?.active(this);\n        } else if (this.isReady.value) {\n            this._visible.value = false;\n            this.parent?.unActive(this);\n        }\n    }\n\n    constructor(readonly skeleton: Skeleton, readonly config: IPanelConfig) {\n        super(skeleton, config, false);\n        this.props = config.props;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/widget-modal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { h, VNode } from 'vue';\nimport { Skeleton } from '../skeleton';\nimport { IWidget, IWidgetModalConfig } from '../types';\nimport WidgetView from '../views/widget';\nimport { Modal } from './modal';\nimport { BaseWidget } from './baseWidget';\n\nexport class WidgetModal extends BaseWidget implements IWidget {\n    readonly align?: string;\n\n    readonly title: string;\n\n    readonly onClick: (widget: IWidget) => void;\n\n    private _modal?: Modal;\n\n    get content(): VNode {\n        return h(WidgetView, {\n            widget: this,\n            key: this.id,\n            onClick: () => {\n                this._modal.show();\n                this.onClick?.(this);\n            },\n        });\n    }\n\n    constructor(\n        readonly skeleton: Skeleton,\n        readonly config: IWidgetModalConfig,\n    ) {\n        super(skeleton, config);\n        const {\n            props = {},\n            name,\n            modalName,\n            modalContent,\n            modalProps = {},\n        } = config;\n        this.align = props.align;\n        this.title = props.title || name;\n        this.onClick = props.onClick;\n        if (props.onInit) {\n            props.onInit.call(this, this);\n        }\n        this._modal = this.skeleton.add({\n            type: 'Modal',\n            name: modalName ?? `${this.name}Modal`,\n            area: 'globalArea',\n            props: modalProps,\n            content: modalContent,\n        }) as Modal;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/widget-panel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { h, VNode } from 'vue';\nimport { Skeleton } from '../skeleton';\nimport { IWidget, IWidgetPanelConfig } from '../types';\nimport WidgetView from '../views/widget';\nimport { Panel } from './panel';\nimport { BaseWidget } from './baseWidget';\n\nexport class WidgetPanel extends BaseWidget implements IWidget {\n    readonly align?: string;\n\n    readonly title: string;\n\n    readonly onClick: (widget: IWidget) => void;\n\n    private _panel?: Panel;\n\n    get content(): VNode {\n        return h(WidgetView, {\n            widget: this,\n            key: this.id,\n            onClick: () => {\n                this._panel.show();\n                this.onClick?.(this);\n            },\n        });\n    }\n\n    constructor(\n        readonly skeleton: Skeleton,\n        readonly config: IWidgetPanelConfig,\n    ) {\n        super(skeleton, config);\n        const {\n            props = {},\n            name,\n            panelName,\n            panelContent,\n            panelProps = {},\n        } = config;\n        this.align = props.align;\n        this.title = props.title || name;\n        this.onClick = props.onClick;\n        if (props.onInit) {\n            props.onInit.call(this, this);\n        }\n        this._panel = this.skeleton.add({\n            type: 'Panel',\n            name: panelName ?? `${this.name}Panel`,\n            area: panelProps.area ?? 'leftFloatArea',\n            props: panelProps,\n            content: panelContent,\n        }) as Panel;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/editor-skeleton/src/widget/widget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { h, VNode } from 'vue';\nimport { Skeleton } from '../skeleton';\nimport { IWidget, IWidgetConfig } from '../types';\nimport WidgetView from '../views/widget';\nimport { BaseWidget } from './baseWidget';\n\nexport class Widget extends BaseWidget implements IWidget {\n    readonly align?: string;\n\n    readonly title: string;\n\n    readonly onClick: (widget: IWidget) => void;\n\n    get content(): VNode {\n        return h(WidgetView, {\n            widget: this,\n            key: this.id,\n            onClick: () => {\n                this.onClick?.(this);\n            },\n        });\n    }\n\n    constructor(readonly skeleton: Skeleton, readonly config: IWidgetConfig) {\n        super(skeleton, config);\n        const { props = {}, name } = config;\n        this.align = props.align;\n        this.title = props.title || name;\n        this.onClick = props.onClick;\n        if (props.onInit) {\n            props.onInit.call(this, this);\n        }\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/engine-core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createApp } from 'vue';\nimport { isPlainObject } from 'lodash-es';\nimport { editor, EngineOptions, engineConfig } from '@webank/letgo-editor-core';\nimport { Skeleton } from '@webank/letgo-editor-skeleton';\nimport { PluginManager, IPluginContext, PluginPreference } from './plugins';\nimport { Workbench } from '../../editor-skeleton/src';\n\nconst plugins = new PluginManager(editor).toProxy();\neditor.set('plugins' as any, plugins);\n\nconst skeleton = new Skeleton(editor);\neditor.set('skeleton' as any, skeleton);\n\nexport const version = '1.0.0';\nengineConfig.set('ENGINE_VERSION', 1);\n\nexport { plugins };\n\n// 注册一批内置插件\n(async function registerPlugins() {\n    //注册默认的面板\n    plugins.register({\n        name: '___default_panel___',\n        init(ctx: IPluginContext) {\n            console.log(ctx);\n        },\n    });\n})();\n\nlet isEngineMounted = false;\nexport async function init(\n    container?: HTMLElement,\n    options?: EngineOptions,\n    pluginPreference?: PluginPreference,\n): Promise<() => void> {\n    if (isEngineMounted) return;\n    isEngineMounted = true;\n    let engineOptions = null;\n    let engineContainer = null;\n    if (isPlainObject(container)) {\n        engineOptions = container as EngineOptions;\n        engineContainer = document.createElement('div');\n        document.body.appendChild(engineContainer);\n    } else {\n        engineOptions = options;\n        engineContainer = container;\n        if (!container) {\n            engineContainer = document.createElement('div');\n            document.body.appendChild(engineContainer);\n        }\n    }\n    engineContainer.id = 'engine';\n    engineConfig.setEngineOptions(engineOptions);\n    await plugins.init(pluginPreference);\n\n    const app = createApp(Workbench, {\n        skeleton,\n    });\n    app.mount(engineContainer);\n\n    /**\n     * 清除实例\n     */\n    return function destroy() {\n        app.unmount();\n        //TODO 清除创建的各种实例\n    };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/index.ts","messages":[{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after import statement not followed by another import.","line":1,"column":1,"nodeType":null,"fix":{"range":[40,40],"text":"\n"}},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./engine-core\"","line":1,"column":25,"nodeType":"Literal","endLine":1,"endColumn":40},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./engine-core\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":30},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./plugins/plugin-types\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":39}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { version } from './engine-core';\nexport * from './engine-core';\nexport * from './plugins/plugin-types';\n\nconsole.log(\n    `%c LetgoLowCodeEngine %c v${version} `,\n    'padding: 2px 1px; border-radius: 3px 0 0 3px; color: #fff; background: #606060; font-weight: bold;',\n    'padding: 2px 1px; border-radius: 0 3px 3px 0; color: #fff; background: #42c02e; font-weight: bold;',\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./plugin-types\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":31},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./plugin-context\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":33},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./plugin-manager\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":33},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./plugin\"","line":4,"column":15,"nodeType":"Literal","endLine":4,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './plugin-types';\nexport * from './plugin-context';\nexport * from './plugin-manager';\nexport * from './plugin';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/plugin-context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Logger, getLogger } from '@webank/letgo-utils';\nimport { EngineConfig, Editor, engineConfig } from '@webank/letgo-editor-core';\nimport { Designer } from '@webank/letgo-designer';\nimport {\n    IPluginContext,\n    IPluginManager,\n    IPluginPreferenceManager,\n    IPluginContextOptions,\n    IPluginPreferenceDeclaration,\n    PreferenceValueType,\n} from './plugin-types';\nimport { Skeleton, Hotkey, Setters, Project, Material } from '../shell';\nimport { isValidPreferenceKey } from './plugin-utils';\n\nexport default class PluginContext implements IPluginContext {\n    editor: Editor;\n    designer: Designer;\n    skeleton: Skeleton;\n    hotkey: Hotkey;\n    logger: Logger;\n    plugins: IPluginManager;\n    setters: Setters;\n    config: EngineConfig;\n    material: Material;\n    project: Project;\n    preference: IPluginPreferenceManager;\n\n    constructor(plugins: IPluginManager, options: IPluginContextOptions) {\n        this.editor = plugins.editor;\n        const designer = this.editor.get('designer');\n        const skeleton = this.editor.get('skeleton');\n\n        const { pluginName = 'anonymous' } = options;\n        const project = designer?.project;\n        this.designer = designer;\n        this.hotkey = new Hotkey();\n        this.project = new Project();\n        this.skeleton = new Skeleton(skeleton);\n        this.setters = new Setters();\n        this.material = new Material(this.editor, designer);\n        this.config = engineConfig;\n        this.plugins = plugins;\n        this.logger = getLogger({\n            level: 'warn',\n            bizName: `designer:plugin:${pluginName}`,\n        });\n\n        const enhancePluginContextHook = engineConfig.get(\n            'enhancePluginContextHook',\n        );\n        if (enhancePluginContextHook) {\n            enhancePluginContextHook(this);\n        }\n    }\n\n    setPreference(\n        pluginName: string,\n        preferenceDeclaration: IPluginPreferenceDeclaration,\n    ): void {\n        const getPreferenceValue = (\n            key: string,\n            defaultValue?: PreferenceValueType,\n        ): PreferenceValueType | undefined => {\n            if (!isValidPreferenceKey(key, preferenceDeclaration)) {\n                return undefined;\n            }\n            const pluginPreference =\n                this.plugins.getPluginPreference(pluginName) || {};\n            if (\n                pluginPreference[key] === undefined ||\n                pluginPreference[key] === null\n            ) {\n                return defaultValue;\n            }\n            return pluginPreference[key];\n        };\n\n        this.preference = {\n            getPreferenceValue,\n        };\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/plugin-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Editor, engineConfig } from '@webank/letgo-editor-core';\nimport { getLogger } from '@webank/letgo-utils';\nimport {\n    PreferenceValueType,\n    IPluginManager,\n    IPlugin,\n    PluginPreference,\n    IPluginRegisterOptions,\n    IPluginContextOptions,\n    IPluginConfig,\n    isPluginRegisterOptions,\n    IPluginPreferenceDeclaration,\n} from './plugin-types';\nimport { Plugin } from './plugin';\nimport PluginContext from './plugin-context';\nimport { invariant } from '../utils';\nimport sequencify from './sequencify';\nimport semverSatisfies from 'semver/functions/satisfies';\n\nconst logger = getLogger({ level: 'warn', bizName: 'engine:pluginManager' });\n\nexport class PluginManager implements IPluginManager {\n    editor: Editor;\n\n    private plugins: IPlugin[] = [];\n\n    private pluginsMap: Map<string, IPlugin> = new Map();\n\n    private pluginPreference?: PluginPreference = new Map();\n\n    constructor(editor: Editor) {\n        this.editor = editor;\n    }\n\n    private _getPluginContext(options: IPluginContextOptions) {\n        return new PluginContext(this, options);\n    }\n\n    isEngineVersionMatched(versionExp: string): boolean {\n        const engineVersion = engineConfig.get('ENGINE_VERSION');\n        // ref: https://github.com/npm/node-semver#functions\n        // 1.0.1-beta should match '^1.0.0'\n        return semverSatisfies(engineVersion, versionExp, {\n            includePrerelease: true,\n        });\n    }\n\n    /**\n     * register a plugin\n     * @param pluginConfigCreator - a creator function which returns the plugin config\n     * @param options - the plugin options\n     * @param registerOptions - the plugin register options\n     */\n    async register(\n        pluginConfig: IPluginConfig,\n        options?: any,\n        registerOptions?: IPluginRegisterOptions,\n    ): Promise<void> {\n        // registerOptions maybe in the second place\n        if (isPluginRegisterOptions(options)) {\n            registerOptions = options;\n            options = {};\n        }\n        const { name: pluginName, meta = {} } = pluginConfig;\n        const { preferenceDeclaration, engines } = meta;\n        const ctx = this._getPluginContext({ pluginName });\n        invariant(pluginName, 'pluginConfig.pluginName required', pluginConfig);\n\n        ctx.setPreference(\n            pluginName,\n            preferenceDeclaration as IPluginPreferenceDeclaration,\n        );\n\n        const allowOverride = registerOptions?.override === true;\n\n        if (this.pluginsMap.has(pluginName)) {\n            if (!allowOverride) {\n                throw new Error(`Plugin with name ${pluginName} exists`);\n            } else {\n                // clear existing plugin\n                const originalPlugin = this.pluginsMap.get(pluginName);\n                logger.log(\n                    'plugin override, originalPlugin with name ',\n                    pluginName,\n                    ' will be destroyed, config:',\n                    originalPlugin?.config,\n                );\n                originalPlugin?.destroy();\n                this.pluginsMap.delete(pluginName);\n            }\n        }\n\n        const engineVersionExp = engines && engines.version;\n        if (\n            engineVersionExp &&\n            !this.isEngineVersionMatched(engineVersionExp)\n        ) {\n            throw new Error(\n                `plugin ${pluginName} skipped, engine check failed, current engine version is ${engineConfig.get(\n                    'ENGINE_VERSION',\n                )}, meta.engines.version is ${engineVersionExp}`,\n            );\n        }\n\n        const plugin = new Plugin(\n            pluginName,\n            this,\n            pluginConfig,\n            meta,\n            ctx,\n            options,\n        );\n        // support initialization of those plugins which registered after normal initialization by plugin-manager\n        if (registerOptions?.autoInit) {\n            await plugin.init();\n        }\n        this.plugins.push(plugin);\n        this.pluginsMap.set(pluginName, plugin);\n        logger.log(\n            `plugin registered with pluginName: ${pluginName}, config: ${pluginConfig}, meta: ${meta}`,\n        );\n    }\n\n    get(pluginName: string): IPlugin | undefined {\n        return this.pluginsMap.get(pluginName);\n    }\n\n    getAll(): IPlugin[] {\n        return this.plugins;\n    }\n\n    has(pluginName: string): boolean {\n        return this.pluginsMap.has(pluginName);\n    }\n\n    async delete(pluginName: string): Promise<boolean> {\n        const idx = this.plugins.findIndex(\n            (plugin) => plugin.name === pluginName,\n        );\n        if (idx === -1) return false;\n        const plugin = this.plugins[idx];\n        await plugin.destroy();\n\n        this.plugins.splice(idx, 1);\n        return this.pluginsMap.delete(pluginName);\n    }\n\n    async init(pluginPreference?: PluginPreference) {\n        const pluginNames: string[] = [];\n        const pluginObj: { [name: string]: IPlugin } = {};\n        this.pluginPreference = pluginPreference;\n        this.plugins.forEach((plugin) => {\n            pluginNames.push(plugin.name);\n            pluginObj[plugin.name] = plugin;\n        });\n        const { missingTasks, sequence } = sequencify(pluginObj, pluginNames);\n        invariant(\n            !missingTasks.length,\n            'plugin dependency missing',\n            missingTasks,\n        );\n        logger.log('load plugin sequence:', sequence);\n\n        for (const pluginName of sequence) {\n            try {\n                await this.pluginsMap.get(pluginName)!.init();\n            } catch (e) /* istanbul ignore next */ {\n                logger.error(\n                    `Failed to init plugin:${pluginName}, it maybe affect those plugins which depend on this.`,\n                );\n                logger.error(e);\n            }\n        }\n    }\n\n    async destroy() {\n        for (const plugin of this.plugins) {\n            await plugin.destroy();\n        }\n    }\n\n    get size() {\n        return this.pluginsMap.size;\n    }\n\n    getPluginPreference(\n        pluginName: string,\n    ): Record<string, PreferenceValueType> | null | undefined {\n        if (!this.pluginPreference) {\n            return null;\n        }\n        return this.pluginPreference.get(pluginName);\n    }\n\n    toProxy() {\n        return new Proxy(this, {\n            get(target, prop, receiver) {\n                if (target.pluginsMap.has(prop as string)) {\n                    // 禁用态的插件，直接返回 undefined\n                    if (target.pluginsMap.get(prop as string)!.disabled) {\n                        return undefined;\n                    }\n                    return target.pluginsMap.get(prop as string)?.toProxy();\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n        });\n    }\n\n    /* istanbul ignore next */\n    setDisabled(pluginName: string, flag = true) {\n        logger.warn(`plugin:${pluginName} has been set disable:${flag}`);\n        this.pluginsMap.get(pluginName)?.setDisabled(flag);\n    }\n\n    async dispose() {\n        await this.destroy();\n        this.plugins = [];\n        this.pluginsMap.clear();\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/plugin-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Logger } from '@webank/letgo-utils';\nimport { EngineConfig, Editor } from '@webank/letgo-editor-core';\nimport { Designer } from '@webank/letgo-designer';\nimport { Skeleton, Hotkey, Setters, Project, Material } from '../shell';\nimport { CompositeObject } from '@webank/letgo-types';\n\nexport type PreferenceValueType = string | number | boolean;\n\nexport interface IPluginPreferenceDeclarationProperty {\n    // shape like 'name' or 'group.name' or 'group.subGroup.name'\n    key: string;\n    // must have either one of description & markdownDescription\n    description: string;\n    // value in 'number', 'string', 'boolean'\n    type: string;\n    // default value\n    // NOTE! this is only used in configuration UI, won`t affect runtime\n    default?: PreferenceValueType;\n    // only works when type === 'string', default value false\n    useMultipleLineTextInput?: boolean;\n    // enum values, only works when type === 'string'\n    enum?: any[];\n    // descriptions for enum values\n    enumDescriptions?: string[];\n    // message that describing deprecation of this property\n    deprecationMessage?: string;\n}\n\nexport interface IPluginPreferenceDeclaration {\n    // this will be displayed on configuration UI, can be plugin name\n    title: string;\n    properties: IPluginPreferenceDeclarationProperty[];\n}\n\nexport type PluginPreference = Map<string, Record<string, PreferenceValueType>>;\n\nexport interface IPluginConfigMetaEngineConfig {\n    version?: string;\n}\n\nexport interface IPluginConfigMeta {\n    preferenceDeclaration?: IPluginPreferenceDeclaration;\n    // 依赖插件名\n    dependencies?: string[];\n    engines?: IPluginConfigMetaEngineConfig;\n}\n\nexport interface IPluginPreferenceManager {\n    // eslint-disable-next-line max-len\n    getPreferenceValue: (\n        key: string,\n        defaultValue?: PreferenceValueType,\n    ) => PreferenceValueType | undefined;\n}\n\nexport interface IPluginContext {\n    editor: Editor;\n    designer: Designer;\n    skeleton: Skeleton;\n    hotkey: Hotkey;\n    logger: Logger;\n    plugins: IPluginManager;\n    setters: Setters;\n    config: EngineConfig;\n    material: Material;\n    project: Project;\n    preference: IPluginPreferenceManager;\n}\n\nexport interface IPluginConfig {\n    name: string;\n    init: (ctx: IPluginContext, options: any) => void;\n    meta?: IPluginConfigMeta;\n    dep?: string | string[];\n    destroy?(): void;\n    exports?(): any;\n}\n\nexport interface IPluginCore {\n    name: string;\n    dep: string[];\n    disabled: boolean;\n    config: IPluginConfig;\n    logger: Logger;\n    on(event: string | symbol, listener: (...args: any[]) => void): any;\n    emit(event: string | symbol, ...args: any[]): boolean;\n    removeAllListeners(event?: string | symbol): this;\n    init(forceInit?: boolean): void;\n    isInit(): boolean;\n    destroy(): void;\n    toProxy(): any;\n    setDisabled(flag: boolean): void;\n}\n\ninterface IPluginExportsAccessor {\n    [propName: string]: any;\n}\n\nexport type IPlugin = IPluginCore & IPluginExportsAccessor;\n\nexport interface IPluginManagerCore {\n    editor: Editor;\n    register(\n        pluginConfig: IPluginConfig,\n        pluginOptions?: any,\n        registerOptions?: CompositeObject,\n    ): Promise<void>;\n    init(\n        pluginPreference?: Map<string, Record<string, PreferenceValueType>>,\n    ): Promise<void>;\n    get(pluginName: string): IPlugin | undefined;\n    getAll(): IPlugin[];\n    has(pluginName: string): boolean;\n    delete(pluginName: string): any;\n    setDisabled(pluginName: string, flag: boolean): void;\n    dispose(): void;\n}\n\ninterface IPluginManagerPluginAccessor {\n    [pluginName: string]: IPlugin | any;\n}\n\nexport type IPluginManager = IPluginManagerCore & IPluginManagerPluginAccessor;\n\nexport interface IPluginRegisterOptions {\n    autoInit?: boolean;\n    // allow overriding existing plugin with same name when override === true\n    override?: boolean;\n}\n\nexport function isPluginRegisterOptions(\n    opts: any,\n): opts is IPluginRegisterOptions {\n    return opts && ('autoInit' in opts || 'override' in opts);\n}\n\nexport interface IPluginContextOptions {\n    pluginName: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/plugin-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { IPluginPreferenceDeclaration } from './plugin-types';\nimport { isPlainObject } from 'lodash';\n\nexport function isValidPreferenceKey(\n    key: string,\n    preferenceDeclaration: IPluginPreferenceDeclaration,\n): boolean {\n    if (\n        !preferenceDeclaration ||\n        !Array.isArray(preferenceDeclaration.properties)\n    ) {\n        return false;\n    }\n    return preferenceDeclaration.properties.some((prop) => {\n        return prop.key === key;\n    });\n}\n\nexport function filterValidOptions(\n    opts: any,\n    preferenceDeclaration: IPluginPreferenceDeclaration,\n) {\n    if (!opts || !isPlainObject(opts)) return opts;\n    const filteredOpts = {} as any;\n    Object.keys(opts).forEach((key) => {\n        if (isValidPreferenceKey(key, preferenceDeclaration)) {\n            const v = opts[key];\n            if (v !== undefined && v !== null) {\n                filteredOpts[key] = v;\n            }\n        }\n    });\n    return filteredOpts;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/plugin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getLogger, Logger } from '@webank/letgo-utils';\nimport {\n    IPlugin,\n    IPluginConfig,\n    IPluginManager,\n    IPluginConfigMeta,\n    IPluginContext,\n} from './plugin-types';\nimport { EventEmitter } from 'events';\nimport { invariant } from '../utils';\n\nexport class Plugin implements IPlugin {\n    config: IPluginConfig;\n\n    logger: Logger;\n\n    private manager: IPluginManager;\n\n    private emitter: EventEmitter;\n\n    private _inited: boolean;\n\n    private pluginName: string;\n\n    private meta: IPluginConfigMeta;\n\n    /**\n     * 标识插件状态，是否被 disabled\n     */\n    private _disabled: boolean;\n\n    private _ctx: IPluginContext;\n\n    private _options: any;\n\n    constructor(\n        pluginName: string,\n        manager: IPluginManager,\n        config: IPluginConfig,\n        meta: IPluginConfigMeta,\n        ctx: IPluginContext,\n        options: any,\n    ) {\n        this.manager = manager;\n        this.config = config;\n        this.emitter = new EventEmitter();\n        this.pluginName = pluginName;\n        this.meta = meta;\n        this.logger = getLogger({\n            level: 'warn',\n            bizName: `designer:plugin:${pluginName}`,\n        });\n        this._ctx = ctx;\n        this._options = options;\n    }\n\n    get name() {\n        return this.pluginName;\n    }\n\n    get dep() {\n        if (typeof this.meta.dependencies === 'string') {\n            return [this.meta.dependencies];\n        }\n        // compat legacy way to declare dependencies\n        if (typeof this.config.dep === 'string') {\n            return [this.config.dep];\n        }\n        return this.meta.dependencies || this.config.dep || [];\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    on(event: string | symbol, listener: (...args: any[]) => void): any {\n        this.emitter.on(event, listener);\n        return () => {\n            this.emitter.off(event, listener);\n        };\n    }\n\n    emit(event: string | symbol, ...args: any[]) {\n        return this.emitter.emit(event, ...args);\n    }\n\n    removeAllListeners(event: string | symbol): any {\n        return this.emitter.removeAllListeners(event);\n    }\n\n    isInit() {\n        return this._inited;\n    }\n\n    async init(forceInit?: boolean) {\n        if (this._inited && !forceInit) return;\n        this.logger.log('method init called');\n        await this.config.init?.call(undefined, this._ctx, this._options);\n        this._inited = true;\n    }\n\n    async destroy() {\n        if (!this._inited) return;\n        this.logger.log('method destroy called');\n        await this.config?.destroy?.call(undefined);\n        this._inited = false;\n    }\n\n    setDisabled(flag = true) {\n        this._disabled = flag;\n    }\n\n    toProxy() {\n        invariant(this._inited, 'Could not call toProxy before init');\n        const exports = this.config.exports?.();\n        return new Proxy(this, {\n            get(target, prop, receiver) {\n                if ({}.hasOwnProperty.call(exports, prop)) {\n                    return exports?.[prop as string];\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n        });\n    }\n\n    async dispose() {\n        await this.manager.delete(this.name);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/plugins/sequencify.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":2,"column":3,"nodeType":null,"messageId":"insert","endLine":2,"endColumn":3,"fix":{"range":[71,71],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":3,"column":1,"nodeType":null,"messageId":"insert","endLine":3,"endColumn":1,"fix":{"range":[97,97],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":4,"column":1,"nodeType":null,"messageId":"replace","endLine":4,"endColumn":7,"fix":{"range":[137,143],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `········`","line":5,"column":1,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":5,"fix":{"range":[169,173],"text":"        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":6,"column":1,"nodeType":null,"messageId":"insert","endLine":6,"endColumn":1,"fix":{"range":[175,175],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":7,"column":5,"nodeType":null,"messageId":"insert","endLine":7,"endColumn":5,"fix":{"range":[209,209],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":8,"column":1,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":7,"fix":{"range":[222,228],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":9,"column":1,"nodeType":null,"messageId":"insert","endLine":9,"endColumn":1,"fix":{"range":[248,248],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":10,"column":1,"nodeType":null,"messageId":"replace","endLine":10,"endColumn":7,"fix":{"range":[290,296],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":11,"column":1,"nodeType":null,"messageId":"replace","endLine":11,"endColumn":7,"fix":{"range":[313,319],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":12,"column":1,"nodeType":null,"messageId":"replace","endLine":12,"endColumn":7,"fix":{"range":[350,356],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":13,"column":1,"nodeType":null,"messageId":"insert","endLine":13,"endColumn":1,"fix":{"range":[372,372],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":14,"column":1,"nodeType":null,"messageId":"replace","endLine":14,"endColumn":7,"fix":{"range":[406,412],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `······`","line":15,"column":1,"nodeType":null,"messageId":"insert","endLine":15,"endColumn":1,"fix":{"range":[429,429],"text":"      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `············`","line":16,"column":1,"nodeType":null,"messageId":"replace","endLine":16,"endColumn":7,"fix":{"range":[508,514],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":17,"column":5,"nodeType":null,"messageId":"insert","endLine":17,"endColumn":5,"fix":{"range":[534,534],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `········`","line":18,"column":1,"nodeType":null,"messageId":"replace","endLine":18,"endColumn":5,"fix":{"range":[536,540],"text":"        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":19,"column":1,"nodeType":null,"messageId":"insert","endLine":19,"endColumn":1,"fix":{"range":[560,560],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":25,"column":3,"nodeType":null,"messageId":"insert","endLine":25,"endColumn":3,"fix":{"range":[683,683],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··` with `····`","line":26,"column":1,"nodeType":null,"messageId":"replace","endLine":26,"endColumn":3,"fix":{"range":[723,725],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":27,"column":1,"nodeType":null,"messageId":"insert","endLine":27,"endColumn":1,"fix":{"range":[762,762],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··` with `····`","line":29,"column":1,"nodeType":null,"messageId":"replace","endLine":29,"endColumn":3,"fix":{"range":[818,820],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":31,"column":3,"nodeType":null,"messageId":"insert","endLine":31,"endColumn":3,"fix":{"range":[880,880],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `········`","line":32,"column":1,"nodeType":null,"messageId":"replace","endLine":32,"endColumn":5,"fix":{"range":[922,926],"text":"        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":33,"column":3,"nodeType":null,"messageId":"insert","endLine":33,"endColumn":3,"fix":{"range":[1035,1035],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":35,"column":1,"nodeType":null,"messageId":"insert","endLine":35,"endColumn":1,"fix":{"range":[1038,1038],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":36,"column":5,"nodeType":null,"messageId":"insert","endLine":36,"endColumn":5,"fix":{"range":[1053,1053],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `········`","line":37,"column":1,"nodeType":null,"messageId":"replace","endLine":37,"endColumn":5,"fix":{"range":[1072,1076],"text":"        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `····`","line":38,"column":1,"nodeType":null,"messageId":"insert","endLine":38,"endColumn":1,"fix":{"range":[1099,1099],"text":"    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":39,"column":1,"nodeType":null,"messageId":"insert","endLine":39,"endColumn":1,"fix":{"range":[1137,1137],"text":"  "}}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":30,"fixableWarningCount":0,"source":"function sequence(tasks, names, results, missing, recursive, nest) {\n  names.forEach((name) => {\n    if (results.indexOf(name) !== -1) {\n      return; // de-dup results\n    }\n    const node = tasks[name];\n    if (!node) {\n      missing.push(name);\n    } else if (nest.indexOf(name) > -1) {\n      nest.push(name);\n      recursive.push(nest.slice(0));\n      nest.pop(name);\n    } else if (node.dep.length) {\n      nest.push(name);\n      sequence(tasks, node.dep, results, missing, recursive, nest); // recurse\n      nest.pop(name);\n    }\n    results.push(name);\n  });\n}\n\n// tasks: object with keys as task names\n// names: array of task names\nexport default function (tasks, names) {\n  let results = []; // the final sequence\n  const missing = []; // missing tasks\n  const recursive = []; // recursive task dependencies\n\n  sequence(tasks, names, results, missing, recursive, []);\n\n  if (missing.length || recursive.length) {\n    results = []; // results are incomplete at best, completely wrong at worst, remove them to avoid confusion\n  }\n\n  return {\n    sequence: results,\n    missingTasks: missing,\n    recursiveDependencies: recursive,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/hotkey.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./symbols\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":26},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./hotkey\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./skeleton\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":27},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./setters\"","line":4,"column":15,"nodeType":"Literal","endLine":4,"endColumn":26},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./project\"","line":5,"column":15,"nodeType":"Literal","endLine":5,"endColumn":26},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./material\"","line":6,"column":15,"nodeType":"Literal","endLine":6,"endColumn":27}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './symbols';\nexport * from './hotkey';\nexport * from './skeleton';\nexport * from './setters';\nexport * from './project';\nexport * from './material';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/material.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Editor } from '@webank/letgo-editor-core';\nimport { Designer } from '@webank/letgo-designer';\nimport { AssetsJson } from '@webank/letgo-types';\nimport { editorSymbol, designerSymbol } from './symbols';\n\nexport class Material {\n    private readonly [editorSymbol]: Editor;\n    private readonly [designerSymbol]: Designer;\n\n    constructor(editor: Editor, designer: Designer) {\n        this[editorSymbol] = editor;\n        this[designerSymbol] = designer;\n    }\n\n    /**\n     * 设置「资产包」结构\n     * @param assets\n     * @returns\n     */\n    async setAssets(assets: AssetsJson) {\n        return await this[editorSymbol].setAssets(assets);\n    }\n\n    /**\n     * 获取「资产包」结构\n     * @returns\n     */\n    getAssets(): AssetsJson {\n        return this[editorSymbol].get('assets');\n    }\n\n    /**\n     * 添加资产包\n     * @returns\n     */\n    addAssets(incrementalAssets: AssetsJson) {\n        const assets = this.getAssets();\n        if (incrementalAssets.packages) {\n            assets.packages = [\n                ...(assets.packages || []),\n                ...incrementalAssets.packages,\n            ];\n        }\n        if (incrementalAssets.components) {\n            assets.components = [\n                ...(assets.components || []),\n                ...incrementalAssets.components,\n            ];\n        }\n        if (incrementalAssets.sort) {\n            assets.sort = {\n                groupList: [\n                    ...(assets.sort?.groupList || []),\n                    ...(incrementalAssets.sort?.groupList || []),\n                ],\n                categoryList: [\n                    ...(assets.sort?.categoryList || []),\n                    ...(incrementalAssets.sort?.categoryList || []),\n                ],\n            };\n        }\n        this.setAssets(assets);\n    }\n\n    /**\n     * 监听 assets 变化的事件\n     * @param fn\n     */\n    onChangeAssets(fn: () => void) {\n        // 设置 assets，经过 setAssets 赋值\n        this[editorSymbol].onGot('assets', fn);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/project.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/setters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/skeleton.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n    Skeleton as InnerSkeleton,\n    IWidgetBaseConfig,\n    IWidgetConfigArea,\n    IWidgetConfig,\n    IWidgetModalConfig,\n    IPanelProps,\n} from '@webank/letgo-editor-skeleton';\nimport { skeletonSymbol } from './symbols';\n\nexport class Skeleton {\n    private readonly [skeletonSymbol]: InnerSkeleton;\n\n    constructor(skeleton: InnerSkeleton) {\n        this[skeletonSymbol] = skeleton;\n    }\n\n    /**\n     * 增加一个面板实例\n     * @param config\n     * @param extraConfig\n     * @returns\n     */\n    add(\n        config: IWidgetBaseConfig &\n            (IWidgetConfig | IWidgetModalConfig | IPanelProps),\n        extraConfig?: Record<string, any>,\n    ) {\n        return this[skeletonSymbol].add(config, extraConfig);\n    }\n\n    /**\n     * 移除一个面板实例\n     * @param config\n     * @returns\n     */\n    remove(config: IWidgetBaseConfig) {\n        const { area, name } = config;\n        const skeleton = this[skeletonSymbol];\n        if (!normalizeArea(area)) return;\n        skeleton[normalizeArea(area)!].remove(name);\n    }\n}\n\nfunction normalizeArea(area: IWidgetConfigArea | undefined) {\n    switch (area) {\n        case 'leftArea':\n        case 'left':\n            return 'leftArea';\n        case 'globalArea':\n        case 'global':\n            return 'globalArea';\n        case 'rightArea':\n        case 'right':\n            return 'rightArea';\n        case 'topArea':\n        case 'top':\n            return 'topArea';\n        case 'toolbar':\n            return 'toolbar';\n        case 'mainArea':\n        case 'main':\n        case 'center':\n        case 'centerArea':\n            return 'mainArea';\n        case 'bottomArea':\n        case 'bottom':\n            return 'bottomArea';\n        case 'leftFloatArea':\n            return 'leftFloatArea';\n        default:\n            throw new Error(`${area} not supported`);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/shell/symbols.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":24,"column":68,"nodeType":null,"messageId":"insert","endLine":24,"endColumn":68,"fix":{"range":[1172,1172],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * 以下 symbol 均用于在 shell 层对外暴露的模型中存储相应内部模型的 key\n */\nexport const projectSymbol = Symbol('project');\nexport const designerSymbol = Symbol('designer');\nexport const skeletonSymbol = Symbol('skeleton');\nexport const documentSymbol = Symbol('document');\nexport const editorSymbol = Symbol('editor');\nexport const nodeSymbol = Symbol('node');\nexport const modalNodesManagerSymbol = Symbol('modalNodesManager');\nexport const nodeChildrenSymbol = Symbol('nodeChildren');\nexport const propSymbol = Symbol('prop');\nexport const settingPropEntrySymbol = Symbol('settingPropEntry');\nexport const settingTopEntrySymbol = Symbol('settingTopEntry');\nexport const propsSymbol = Symbol('props');\nexport const detectingSymbol = Symbol('detecting');\nexport const selectionSymbol = Symbol('selection');\nexport const historySymbol = Symbol('history');\nexport const canvasSymbol = Symbol('canvas');\nexport const dragonSymbol = Symbol('dragon');\nexport const componentMetaSymbol = Symbol('componentMeta');\nexport const dropLocationSymbol = Symbol('dropLocation');\nexport const simulatorHostSymbol = Symbol('simulatorHost');\nexport const simulatorRendererSymbol = Symbol('simulatorRenderer');","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/utils/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./invariant\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":28},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;⏎`","line":1,"column":28,"nodeType":null,"messageId":"insert","endLine":1,"endColumn":28,"fix":{"range":[27,27],"text":";\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"export * from './invariant'","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/engine/src/utils/invariant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function invariant(check: any, message: string, thing?: any) {\n  if (!check) {\n    throw new Error(`[engine] Invariant failed: ${ message }${thing ? ` in '${thing}'` : ''}`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/plugin-components-panel/src/content.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n    <AppstoreOutlined class=\"icon\"/>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { AppstoreOutlined } from '@fesjs/fes-design/icon';\n\nexport default defineComponent({\n    components: {\n        AppstoreOutlined\n    },\n    setup (){\n        return {}\n    }\n})\n\n</script>\n<style scoped>\n.icon {\n    cursor: pointer;\n}\n</style>","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/plugin-components-panel/src/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IPluginConfig } from '@webank/letgo-engine';\nimport Content from './content.vue';\nimport Panel from './panel.vue';\n\nexport default {\n    name: 'PluginComponentsPanel',\n    init({ skeleton, editor }) {\n        skeleton.add({\n            name: 'ComponentsPanel',\n            area: 'leftArea',\n            type: 'WidgetPanel',\n            content: () => <Content />,\n            props: {\n                align: 'top',\n            },\n            panelContent: () => <Panel editor={editor} />,\n            panelProps: {\n                width: '500px',\n                title: '组件库',\n            },\n        });\n    },\n} as IPluginConfig;\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/plugin-components-panel/src/panel.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n    <div class=\"search\">\n        <FInput placeholder=\"请输入\" clearable @input=\"onSearch\">\n            <template #suffix>\n                <SearchOutlined />\n            </template>\n        </FInput>\n    </div>\n    <FTabs>\n        <FTabPane\n            v-for=\"group in groupListRef\"\n            :key=\"group\"\n            :name=\"group\"\n            :value=\"group\"\n        >\n            <div\n                v-for=\"(item, index) in categoryListRef[group]\"\n                :key=\"index\"\n                class=\"category-wrapper\"\n            >\n                <div class=\"category-title\">\n                    {{ item.category }}\n                    <span @click=\"toggle(item)\">\n                        <UpOutlined v-show=\"item.show\" />\n                        <DownOutlined v-show=\"!item.show\" />\n                    </span>\n                </div>\n                <div class=\"category-body\" v-show=\"item.show\">\n                    <div\n                        v-for=\"(snippet, index) in item.snippets\"\n                        :key=\"index\"\n                        class=\"category-body-item\"\n                        draggable=\"true\"\n                        @dragstart=\"handleDragstart($event, snippet)\"\n                    >\n                        <div class=\"category-body-item-icon\">\n                            <img\n                                :src=\"snippet.screenshot\"\n                                draggable=\"false\"\n                                v-if=\"snippet.screenshot\"\n                            />\n                        </div>\n                        <span class=\"category-body-title\">\n                            {{ snippet.title }}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </FTabPane>\n    </FTabs>\n</template>\n<script lang=\"ts\">\nimport {\n    defineComponent,\n    PropType,\n    ref,\n    shallowRef,\n    Ref,\n    computed,\n    onBeforeUnmount,\n    onBeforeMount,\n} from 'vue';\nimport { Editor } from '@webank/letgo-editor-core';\nimport { AssetsJson, Snippet } from '@webank/letgo-types';\nimport { FInput, FTabPane, FTabs } from '@fesjs/fes-design';\nimport {\n    SearchOutlined,\n    DownOutlined,\n    UpOutlined,\n} from '@fesjs/fes-design/icon';\n\ninterface CategoryType {\n    category: string;\n    snippets: Snippet[];\n    show: Ref<boolean>;\n}\n\nexport default defineComponent({\n    props: {\n        editor: {\n            type: Object as PropType<Editor>,\n        },\n    },\n    components: {\n        FInput,\n        FTabPane,\n        FTabs,\n        SearchOutlined,\n        UpOutlined,\n        DownOutlined,\n    },\n    setup(props) {\n        const assetsRef: Ref<AssetsJson> = shallowRef({});\n\n        const searchText: Ref<string> = ref();\n\n        const groupListRef: Ref<string[]> = computed(() => {\n            return assetsRef.value.sort?.groupList ?? [];\n        });\n\n        const categoryListRef: Ref<{\n            [propName: string]: Array<CategoryType>;\n        }> = computed(() => {\n            const categoryList = assetsRef.value.sort?.categoryList ?? [];\n            const res: { [propName: string]: Array<CategoryType> } = {};\n            groupListRef.value.forEach((group) => {\n                res[group] = [];\n                categoryList.forEach((category) => {\n                    const categoryObj: CategoryType = {\n                        category,\n                        snippets: [],\n                        show: ref(true),\n                    };\n                    assetsRef.value.components.forEach((component) => {\n                        if (\n                            component.group === group &&\n                            component.category === category\n                        ) {\n                            categoryObj.snippets = categoryObj.snippets.concat(\n                                component.snippets\n                                    .map((snippet) => {\n                                        return {\n                                            component,\n                                            title: component.title,\n                                            screenshot: component.screenshot,\n                                            ...snippet,\n                                        };\n                                    })\n                                    .filter((snippet) => {\n                                        if (!searchText.value) {\n                                            return true;\n                                        }\n                                        return (\n                                            snippet.title.indexOf(\n                                                searchText.value,\n                                            ) !== -1\n                                        );\n                                    }),\n                            );\n                        }\n                    });\n                    if (categoryObj.snippets.length) {\n                        res[group].push(categoryObj);\n                    }\n                });\n            });\n            return res;\n        });\n\n        const toggle = (item: CategoryType) => {\n            item.show.value = !item.show.value;\n        };\n\n        const onSearch = (val: string) => {\n            searchText.value = val;\n        };\n\n        let unwatch: () => void;\n        onBeforeMount(() => {\n            unwatch = props.editor.onGot('assets', (assets) => {\n                assetsRef.value = assets;\n            });\n        });\n\n        onBeforeUnmount(() => {\n            if (unwatch) {\n                unwatch();\n            }\n        });\n\n        const handleDragstart = (event: DragEvent, snippet: Snippet) => {\n            console.log(event, snippet);\n            const target = event.target as HTMLElement;\n            const image = target.children[0].children[0];\n            event.dataTransfer.setDragImage(\n                image,\n                image.clientWidth / 2,\n                image.clientHeight / 2,\n            );\n        };\n\n        return {\n            assetsRef,\n            groupListRef,\n            categoryListRef,\n            toggle,\n            onSearch,\n            handleDragstart,\n        };\n    },\n});\n</script>\n<style lang=\"less\" scoped>\n.search {\n    padding: 8px 16px;\n}\n.icon {\n    cursor: pointer;\n}\n.category-wrapper {\n}\n.category-title {\n    display: flex;\n    height: 42px;\n    padding: 0 16px;\n    align-items: center;\n    justify-content: space-between;\n    border-bottom: 1px solid #dfdfdf;\n    border-top: 1px solid #dfdfdf;\n    margin-top: -1px;\n}\n.category-body {\n    display: flex;\n    flex-wrap: wrap;\n    &-item {\n        width: 33.3333333333%;\n        height: 114px;\n        flex-shrink: 0;\n        padding: 14px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: space-between;\n        flex-grow: 0;\n        border-right: 1px solid #eaeaea;\n        border-bottom: 1px solid #eaeaea;\n        box-shadow: 0 0 0 0 rgb(0 0 0 / 15%);\n        transition: box-shadow 0.2s ease, -webkit-box-shadow 0.2s ease;\n        &:hover {\n            box-shadow: 0 6px 16px 0 rgb(0 0 0 / 15%);\n            border-color: transparent;\n        }\n        &-icon {\n            width: 56px;\n            height: 56px;\n            margin: 0 1px;\n            display: flex;\n            justify-items: center;\n            img {\n                width: 100%;\n            }\n        }\n        &-title {\n            width: 100%;\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            text-align: center;\n        }\n    }\n}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/template/src/app.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/template/src/pages/components/logo.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n    <div class=\"logo-wrapper\">\n        <img class=\"logo-image\" src=\"@/images/logo.png\" />\n        Letgo 低代码平台\n    </div>\n</template>\n\n<style lang=\"less\">\n.logo-wrapper {\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n    .logo-image {\n        width: 40px;\n        margin-right: 8px;\n    }\n}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/template/src/pages/index.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n    <div ref=\"containerRef\" class=\"engine\"></div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, onMounted, onBeforeUnmount, h } from 'vue';\nimport { init, plugins } from '@webank/letgo-engine';\nimport PluginComponentsPanel from '@webank/letgo-plugin-components-panel';\nimport Logo from './components/logo.vue';\nimport assets from './components/assets.json';\n\nplugins.register({\n    name: 'editor-init',\n    init({ material }) {\n        material.setAssets(assets);\n    },\n});\n\nplugins.register(PluginComponentsPanel);\n\nplugins.register({\n    name: 'skeleton',\n    init({ skeleton, editor }) {\n        editor.on('skeleton.widget.show', (...arg) => {\n            console.log('skeleton.widget.show', arg);\n        });\n        skeleton.add({\n            name: 'widget',\n            area: 'topArea',\n            type: 'Widget',\n            content: () => h(Logo),\n            props: {\n                align: 'left',\n            },\n        });\n        // skeleton.add({\n        //     name: 'widgetModal',\n        //     area: 'leftArea',\n        //     type: 'WidgetModal',\n        //     content: () => h(HomeOutlined),\n        //     props: {\n        //         align: 'top',\n        //     },\n        //     modalContent: () => '我是内容',\n        //     modalProps: {\n        //         title: '我是标题',\n        //         onOk: (widget) => {\n        //             widget.hide();\n        //         },\n        //         onCancel: (widget) => {\n        //             widget.hide();\n        //         },\n        //     },\n        // });\n        // skeleton.add({\n        //     name: 'widgetPanel',\n        //     area: 'leftArea',\n        //     type: 'WidgetPanel',\n        //     content: () => h(HomeOutlined),\n        //     props: {\n        //         align: 'top',\n        //     },\n        //     panelContent: () => '我是内容',\n        //     panelProps: {\n        //         title: '我是标题',\n        //     },\n        // });\n        const panel = skeleton.add({\n            name: 'setter',\n            area: 'rightArea',\n            type: 'Panel',\n            content: () => h('div', ['我是设置器', h('input')]),\n        });\n        panel.show();\n        setTimeout(() => {\n            const panel1 = skeleton.add({\n                name: 'setter2',\n                area: 'rightArea',\n                type: 'Panel',\n                content: () => '我是设置器2',\n            });\n            panel1.show();\n            setTimeout(() => {\n                panel.show();\n            }, 3000);\n        }, 3000);\n    },\n});\n\nexport default defineComponent({\n    setup() {\n        const containerRef = ref(null);\n\n        let destroy: () => void;\n\n        onMounted(async () => {\n            destroy = await init(containerRef.value, {});\n        });\n\n        onBeforeUnmount(() => {\n            if (destroy) {\n                destroy();\n            }\n        });\n\n        return {\n            containerRef,\n        };\n    },\n});\n</script>\n<style>\n.engine {\n    width: 100%;\n    height: 100%;\n}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/app-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface AppConfig {\n    sdkVersion?: string;\n    historyMode?: string;\n    targetRootID?: string;\n    layout?: Layout;\n    theme?: Theme;\n    [key: string]: any;\n}\n\ninterface Theme {\n    package: string;\n    version: string;\n    primary: string;\n}\n\ninterface Layout {\n    componentName?: string;\n    props?: Record<string, any>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/assets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProjectSchema } from './schema';\nimport { ComponentMetadata } from './metadata';\n\n/**\n * 资产包协议\n */\nexport interface AssetsJson {\n    /**\n     * 资产包协议版本号\n     */\n    version?: string;\n    /**\n     * 大包列表，external与package的概念相似，融合在一起\n     */\n    packages?: Package[];\n    /**\n     * 所有组件的描述协议列表所有组件的列表\n     */\n    components?: Array<ComponentDescription>;\n    sort?: ComponentSort;\n}\n\n/**\n * 用于描述组件面板中的 tab 和 category\n */\nexport interface ComponentSort {\n    /**\n     * 用于描述组件面板的 tab 项及其排序，例如：[\"精选组件\", \"原子组件\"]\n     */\n    groupList?: string[];\n    /**\n     * 组件面板中同一个 tab 下的不同区间用 category 区分，category 的排序依照 categoryList 顺序排列；\n     */\n    categoryList?: string[];\n}\n\nexport type codeType = 'proCode' | 'lowCode';\n\n/**\n * 定义组件大包及 external 资源的信息\n * 应该被编辑器默认加载\n */\nexport interface Package {\n    /**\n     * 资源唯一标识，如果为空，则以 package 为唯一标识\n     */\n    id?: string;\n    /**\n     * 资源标题\n     */\n    title?: string;\n    type: codeType;\n    /**\n     * 包名\n     */\n    package: string;\n    /**\n     * 包版本号\n     */\n    version: string;\n    /**\n     * 组件渲染态视图打包后的 CDN url 列表，包含 js 和 css\n     */\n    urls?: string[] | any;\n    /**\n     * 组件编辑态视图打包后的 CDN url 列表，包含 js 和 css\n     */\n    editUrls?: string[] | any;\n    /**\n     * 作为全局变量引用时的名称，和webpack output.library字段含义一样，用来定义全局变量名\n     */\n    library: string;\n    /**\n     * 标识当前 package 资源加载在 window.library 上的是否是一个异步对象\n     */\n    async?: boolean;\n    /**\n     * 当前资源包的依赖资源的唯一标识列表\n     */\n    deps?: string[];\n    /**\n     * 低代码组件的schema\n     */\n    schema?: ProjectSchema;\n}\n\n/**\n * 本地物料描述\n */\nexport interface ComponentDescription extends ComponentMetadata {\n    keywords: string[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/editor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StrictEventEmitter } from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport * as GlobalEvent from './event';\n\nexport type KeyType = (new (...args: any[]) => any) | symbol | string;\nexport type ClassType = new (...args: any[]) => any;\n\nexport interface GetOptions {\n    forceNew?: boolean;\n    sourceCls?: ClassType;\n}\nexport type GetReturnType<T, ClsType> = T extends undefined\n    ? ClsType extends {\n          prototype: infer R;\n      }\n        ? R\n        : any\n    : T;\n\nexport declare interface IEditor\n    extends StrictEventEmitter<EventEmitter, GlobalEvent.EventConfig> {\n    get: <T = undefined, KeyOrType = any>(\n        keyOrType: KeyOrType,\n        opt?: GetOptions,\n    ) => GetReturnType<T, KeyOrType> | undefined;\n\n    has: (keyOrType: KeyType) => boolean;\n\n    set: (key: KeyType, data: any) => void;\n\n    onceGot: <T = undefined, KeyOrType extends KeyType = any>(\n        keyOrType: KeyOrType,\n    ) => Promise<GetReturnType<T, KeyOrType>>;\n\n    onGot: <T = undefined, KeyOrType extends KeyType = any>(\n        keyOrType: KeyOrType,\n        fn: (data: GetReturnType<T, KeyOrType>) => void,\n    ) => () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/event/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Node from './node';\n\nexport interface EventConfig {\n    [Node.Prop.Change]: (options: Node.Prop.ChangeOptions) => any;\n    [Node.Prop.InnerChange]: (options: Node.Prop.ChangeOptions) => any;\n    [Node.Rerender]: (options: Node.RerenderOptions) => void;\n    [eventName: string]: any;\n}\n\nexport * as Node from './node';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/event/node.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * as Prop from './prop';\n\nexport interface RerenderOptions {\n    time: number;\n    componentName?: string;\n    type?: string;\n    nodeCount?: number;\n}\n\nexport const Rerender = 'node.edit.rerender.time';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/event/prop.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ChangeOptions {\n    key?: string | number;\n    prop?: any;\n    node: Node;\n    newValue: any;\n    oldValue: any;\n}\n\n/**\n * Node Prop 变化事件\n * @Deprecated Please Replace With InnerPropChange\n */\nexport const Change = 'node.prop.change';\n\n/** Node Prop 变化事件 */\nexport const InnerChange = 'node.innerProp.change';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./app-config\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":29},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./npm\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":22},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./schema\"","line":3,"column":15,"nodeType":"Literal","endLine":3,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./utils\"","line":4,"column":15,"nodeType":"Literal","endLine":4,"endColumn":24},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./value-type\"","line":5,"column":15,"nodeType":"Literal","endLine":5,"endColumn":29},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./assets\"","line":6,"column":15,"nodeType":"Literal","endLine":6,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./metadata\"","line":7,"column":15,"nodeType":"Literal","endLine":7,"endColumn":27},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./prop-config\"","line":8,"column":15,"nodeType":"Literal","endLine":8,"endColumn":30},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./event\"","line":9,"column":30,"nodeType":"Literal","endLine":9,"endColumn":39},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./editor\"","line":10,"column":15,"nodeType":"Literal","endLine":10,"endColumn":25}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './app-config';\nexport * from './npm';\nexport * from './schema';\nexport * from './utils';\nexport * from './value-type';\nexport * from './assets';\nexport * from './metadata';\nexport * from './prop-config';\nexport * as GlobalEvent from './event';\nexport * from './editor';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PropConfig, PropType } from './prop-config';\nimport { NpmInfo } from './npm';\nimport { NodeSchema } from './schema';\n\n/**\n * 可用片段\n *\n * 内容为组件不同状态下的低代码 schema (可以有多个)，用户从组件面板拖入组件到设计器时会向页面 schema 中插入 snippets 中定义的组件低代码 schema\n */\nexport interface Snippet {\n    /**\n     * 组件分类title\n     */\n    title?: string;\n    /**\n     * snippet 截图\n     */\n    screenshot?: string;\n    /**\n     * 待插入的 schema\n     */\n    schema: NodeSchema;\n}\n\n/**\n * 编辑体验配置\n */\nexport interface Configure {\n    /**\n     * 组件能力配置\n     */\n    component?: ComponentConfigure;\n    /**\n     * 通用扩展面板支持性配置\n     */\n    supports?: ConfigureSupport;\n}\n\n/**\n * 组件 meta 配置\n */\nexport interface ComponentMetadata {\n    /**\n     * 组件名\n     */\n    componentName: string;\n    /**\n     * title or 组件描述\n     */\n    title: string;\n    /**\n     * 组件快照\n     */\n    screenshot?: string;\n    /**\n     * 组件标签\n     */\n    tags?: string[];\n    /**\n     * 组件研发模式\n     */\n    devMode?: 'proCode' | 'lowCode';\n    /**\n     * npm 源引入完整描述对象\n     */\n    npm?: NpmInfo;\n    /**\n     * 组件属性信息\n     */\n    props?: PropConfig[];\n    /**\n     * 编辑体验增强\n     */\n    configure?: Configure;\n    /**\n     * 可用片段\n     */\n    snippets: Snippet[];\n    /**\n     * 一级分组\n     */\n    group?: string;\n    /**\n     * 二级分组\n     */\n    category?: string;\n    /**\n     * 组件优先级排序\n     */\n    priority?: number;\n}\n\n/**\n * 嵌套控制函数\n */\nexport type NestingFilter = (testNode: any, currentNode: any) => boolean;\n/**\n * 嵌套控制\n * 防止错误的节点嵌套，比如 a 嵌套 a, FormField 只能在 Form 容器下，Column 只能在 Table 下等\n */\nexport interface NestingRule {\n    /**\n     * 子级白名单\n     */\n    childWhitelist?: string[] | string | RegExp | NestingFilter;\n    /**\n     * 父级白名单\n     */\n    parentWhitelist?: string[] | string | RegExp | NestingFilter;\n    /**\n     * 后裔白名单\n     */\n    descendantWhitelist?: string[] | string | RegExp | NestingFilter;\n    /**\n     * 后裔黑名单\n     */\n    descendantBlacklist?: string[] | string | RegExp | NestingFilter;\n    /**\n     * 祖先白名单 可用来做区域高亮\n     */\n    ancestorWhitelist?: string[] | string | RegExp | NestingFilter;\n}\n\n/**\n * 组件能力配置\n */\nexport interface ComponentConfigure {\n    /**\n     * 是否容器组件\n     */\n    isContainer?: boolean;\n    /**\n     * 组件是否带浮层，浮层组件拖入设计器时会遮挡画布区域，此时应当辅助一些交互以防止阻挡\n     */\n    isModal?: boolean;\n    /**\n     * 是否存在渲染的根节点\n     */\n    isNullNode?: boolean;\n    /**\n     * 组件树描述信息\n     */\n    descriptor?: string;\n    /**\n     * 嵌套控制：防止错误的节点嵌套\n     * 比如 a 嵌套 a, FormField 只能在 Form 容器下，Column 只能在 Table 下等\n     */\n    nestingRule?: NestingRule;\n\n    /**\n     * 是否是最小渲染单元\n     * 最小渲染单元下的组件渲染和更新都从单元的根节点开始渲染和更新。如果嵌套了多层最小渲染单元，渲染会从最外层的最小渲染单元开始渲染。\n     */\n    isMinimalRenderUnit?: boolean;\n\n    /**\n     * 组件选中框的 cssSelector\n     */\n    rootSelector?: string;\n    /**\n     * 禁用的行为，可以为 `'copy'`, `'move'`, `'remove'` 或它们组成的数组\n     */\n    disableBehaviors?: string[] | string;\n    /**\n     * 用于详细配置上述操作项的内容\n     */\n    actions?: ComponentAction[];\n}\n\nexport type ConfigureSupportEvent =\n    | string\n    | {\n          name: string;\n          propType?: PropType;\n          description?: string;\n      };\n\n/**\n * 通用扩展面板支持性配置\n */\nexport interface ConfigureSupport {\n    /**\n     * 支持事件列表\n     */\n    events?: ConfigureSupportEvent[];\n    /**\n     * 支持 className 设置\n     */\n    className?: boolean;\n    /**\n     * 支持样式设置\n     */\n    style?: boolean;\n    /**\n     * 支持循环设置\n     */\n    loop?: boolean;\n    /**\n     * 支持条件式渲染设置\n     */\n    condition?: boolean;\n}\n\n/**\n * 动作描述\n */\nexport interface ActionContentObject {\n    /**\n     * 图标\n     */\n    icon?: string;\n    /**\n     * 描述\n     */\n    title?: string;\n    /**\n     * 执行动作\n     */\n    action?: (currentNode: any) => void;\n}\n\nexport interface ComponentAction {\n    /**\n     * behaviorName\n     */\n    name: string;\n    /**\n     * 菜单名称\n     */\n    content: string | ActionContentObject;\n    /**\n     * 子集\n     */\n    items?: ComponentAction[];\n    /**\n     * 显示与否\n     * always: 无法禁用\n     */\n    condition?: boolean | ((currentNode: any) => boolean) | 'always';\n    /**\n     * 显示在工具条上\n     */\n    important?: boolean;\n}\n\nexport function isActionContentObject(obj: any): obj is ActionContentObject {\n    return obj && typeof obj === 'object';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/npm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * npm 源引入完整描述对象\n */\nexport interface NpmInfo {\n    /**\n     * 源码组件名称\n     */\n    componentName?: string;\n    /**\n     * 源码组件库名\n     */\n    package: string;\n    /**\n     * 源码组件版本号\n     */\n    version?: string;\n    /**\n     * 是否解构\n     */\n    destructuring?: boolean;\n    /**\n     * 源码组件名称\n     */\n    exportName?: string;\n    /**\n     * 子组件名\n     */\n    subName?: string;\n    /**\n     * 组件路径\n     */\n    main?: string;\n}\n\nexport type ComponentsMap = NpmInfo[];\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/prop-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type PropType = BasicType | RequiredType | ComplexType;\nexport type BasicType =\n    | 'array'\n    | 'bool'\n    | 'func'\n    | 'number'\n    | 'object'\n    | 'string'\n    | 'node'\n    | 'element'\n    | 'any';\nexport type ComplexType =\n    | OneOf\n    | OneOfType\n    | ArrayOf\n    | ObjectOf\n    | Shape\n    | Exact;\n\nexport interface RequiredType {\n    type: BasicType;\n    isRequired?: boolean;\n}\n\nexport interface OneOf {\n    type: 'oneOf';\n    value: string[];\n    isRequired?: boolean;\n}\nexport interface OneOfType {\n    type: 'oneOfType';\n    value: PropType[];\n    isRequired?: boolean;\n}\nexport interface ArrayOf {\n    type: 'arrayOf';\n    value: PropType;\n    isRequired?: boolean;\n}\nexport interface ObjectOf {\n    type: 'objectOf';\n    value: PropType;\n    isRequired?: boolean;\n}\nexport interface Shape {\n    type: 'shape';\n    value: PropConfig[];\n    isRequired?: boolean;\n}\nexport interface Exact {\n    type: 'exact';\n    value: PropConfig[];\n    isRequired?: boolean;\n}\n\n/**\n * 组件属性信息\n */\nexport interface PropConfig {\n    /**\n     * 属性名称\n     */\n    name: string;\n    /**\n     * 属性类型\n     */\n    propType: PropType;\n    /**\n     * 属性描述\n     */\n    description?: string;\n    /**\n     * 属性默认值\n     */\n    defaultValue?: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n    CompositeValue,\n    JSExpression,\n    JSSlot,\n    CompositeObject,\n    JSONObject,\n} from './value-type';\nimport { ComponentsMap } from './npm';\nimport { UtilsMap } from './utils';\nimport { AppConfig } from './app-config';\n\nexport interface Directive {\n    name: string;\n    value: CompositeValue;\n    arg?: CompositeValue;\n    modifiers: string[];\n}\n\n/**\n * 搭建基础协议 - 单个组件树节点描述\n */\nexport interface NodeSchema {\n    id?: string;\n    /**\n     * 组件名称 必填、首字母大写\n     */\n    componentName: string;\n    /**\n     * 节点描述\n     */\n    description?: string;\n    /**\n     * 组件属性对象\n     */\n    props?: PropsMap;\n    /**\n     * 组件指令数组\n     */\n    directives: Directive[];\n    /**\n     * 渲染条件\n     */\n    condition?: CompositeValue;\n    /**\n     * 显示条件\n     */\n    visible?: CompositeValue;\n    /**\n     * 循环数据\n     */\n    loop?: CompositeValue;\n    /**\n     * 循环迭代对象、索引名称 [\"item\", \"index\"]\n     */\n    loopArgs?: [string, string];\n    /**\n     * 子节点\n     */\n    children?: NodeData[];\n}\n\nexport type PropsMap = CompositeObject;\nexport type PropsList = Array<{\n    spread?: boolean;\n    name?: string;\n    value: CompositeValue;\n}>;\n\nexport type NodeData = NodeSchema | JSSlot | JSExpression | DOMText;\nexport type NodeDataType = NodeData | NodeData[];\n\nexport function isDOMText(data: any): data is DOMText {\n    return typeof data === 'string';\n}\n\nexport type DOMText = string;\n\n/**\n * 容器结构描述\n */\nexport interface ContainerSchema extends NodeSchema {\n    /**\n     * 'Block' | 'Page' | 'Component';\n     */\n    componentName: string;\n    /**\n     * 文件名称\n     */\n    fileName: string;\n    /**\n     * 代码\n     */\n    code: string;\n    /**\n     * 样式文件\n     */\n    css?: string;\n    /**\n     * 低代码业务组件默认属性\n     */\n    defaultProps?: CompositeObject;\n}\n\n/**\n * 页面容器\n */\nexport interface PageSchema extends ContainerSchema {\n    componentName: 'Page';\n}\n\n/**\n * 低代码业务组件容器\n */\nexport interface ComponentSchema extends ContainerSchema {\n    componentName: 'Component';\n}\n\n/**\n * 区块容器\n */\nexport interface BlockSchema extends ContainerSchema {\n    componentName: 'Block';\n}\n\n/**\n * @todo\n */\nexport type RootSchema = PageSchema | ComponentSchema | BlockSchema;\n\n/**\n * 应用描述\n */\nexport interface ProjectSchema {\n    id?: string;\n    /**\n     * 当前应用协议版本号\n     */\n    version: string;\n    /**\n     * 当前应用所有组件映射关系\n     */\n    componentsMap: ComponentsMap;\n    /**\n     * 描述应用所有页面、低代码组件的组件树\n     * 低代码业务组件树描述\n     * 是长度固定为1的数组, 即数组内仅包含根容器的描述（低代码业务组件容器类型）\n     */\n    componentsTree: RootSchema[];\n    /**\n     * 应用范围内的全局自定义函数或第三方工具类扩展\n     */\n    utils?: UtilsMap;\n    /**\n     * 应用范围内的全局常量\n     */\n    constants?: JSONObject;\n    /**\n     * 应用范围内的全局样式\n     */\n    css?: string;\n    /**\n     * 当前应用配置信息\n     */\n    config?: AppConfig | Record<string, any>;\n    /**\n     * 当前应用元数据信息\n     */\n    meta?: Record<string, any>;\n}\n\nexport function isNodeSchema(data: any): data is NodeSchema {\n    return data && data.componentName;\n}\n\nexport function isProjectSchema(data: any): data is ProjectSchema {\n    return data && data.componentsTree;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NpmInfo } from './npm';\nimport { JSExpression, JSFunction } from './value-type';\n\nexport type InternalUtils = {\n    name: string;\n    type: 'function';\n    content: JSFunction | JSExpression;\n};\n\nexport type ExternalUtils = {\n    name: string;\n    type: 'npm' | 'wnpm';\n    content: NpmInfo;\n};\n\nexport type UtilItem = InternalUtils | ExternalUtils;\nexport type UtilsMap = UtilItem[];\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/types/src/value-type.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NodeSchema } from './schema';\n\n/**\n * 变量表达式\n *\n * 表达式内通过 this 对象获取上下文\n */\nexport interface JSExpression {\n    type: 'JSExpression';\n    /**\n     * 表达式字符串\n     */\n    value: string;\n}\n\n/**\n * 事件函数类型\n * @see https://lowcode-engine.cn/lowcode\n *\n * 保留与原组件属性、生命周期( React / 小程序)一致的输入参数，并给所有事件函数 binding 统一一致的上下文（当前组件所在容器结构的 this 对象）\n */\nexport interface JSFunction {\n    type: 'JSFunction';\n    /**\n     * 函数定义，或直接函数表达式\n     */\n    value: string;\n}\n\n/**\n * Slot 函数类型\n *\n * 通常用于描述组件的某一个属性为 ReactNode 或 Function return ReactNode 的场景。\n */\nexport interface JSSlot {\n    type: 'JSSlot';\n    /**\n     * 具体的值。\n     */\n    value: {\n        /**\n         * 插槽名称\n         */\n        name?: string;\n        /**\n         * 插槽参数\n         */\n        props?: string;\n        components: NodeSchema[];\n    };\n}\n\n/**\n * JSON 基本类型\n */\nexport type JSONValue =\n    | boolean\n    | string\n    | number\n    | null\n    | undefined\n    | JSONArray\n    | JSONObject;\n\nexport type JSONArray = JSONValue[];\n\nexport interface JSONObject {\n    [key: string]: JSONValue;\n}\n\n/**\n * 复合类型\n */\nexport type CompositeValue =\n    | JSONValue\n    | JSExpression\n    | JSFunction\n    | JSSlot\n    | CompositeArray\n    | CompositeObject;\n\nexport type CompositeArray = CompositeValue[];\n\nexport interface CompositeObject {\n    [key: string]: CompositeValue;\n}\n\nexport function isJSExpression(data: any): data is JSExpression {\n    return data && data.type === 'JSExpression';\n}\n\nexport function isJSFunction(x: any): x is JSFunction {\n    return typeof x === 'object' && x && x.type === 'JSFunction';\n}\n\nexport function isJSSlot(data: any): data is JSSlot {\n    return data && data.type === 'JSSlot';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/utils/src/index.ts","messages":[{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./logger\"","line":1,"column":15,"nodeType":"Literal","endLine":1,"endColumn":25},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./unique-id\"","line":2,"column":15,"nodeType":"Literal","endLine":2,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * from './logger';\nexport * from './unique-id';\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/utils/src/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Logger, { Level } from 'zen-logger';\n\nexport { Logger };\n\nexport function getLogger(config: { level: Level; bizName: string }): Logger {\n    return new Logger(config);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/harrywan/company/git/letgo/packages/utils/src/unique-id.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]}